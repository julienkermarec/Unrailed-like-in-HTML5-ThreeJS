var _0x3fc9 = ['cutForest\x20currentLane', 'lanes[lane].mesh.children[column].children[1].position.z\x20', 'levels[level_id][column][lane]', 'scale', 'send', 'move', 'reduce', 'indexOf', 'next\x20cell', 'glw', 'isInteger', 'min', 'sin', 'userId', 'directions[0]', 'render', 'start', 'HemisphereLight', 'DirectionalLight', 'set', 'shadow', 'camera', 'top', 'bottom', 'DOMContentLoaded', 'scene', 'THREE', 'chat-output', 'setup-datachannel', 'start-solo', 'menu_principal', 'menu_multi', 'cancel-datachannel', 'menu', 'onkeypress', 'message', 'value', '</li>', 'onclick', 'none', 'cancel', 'block', 'startButton', 'unrailed', 'onopen', '<li>Connect√©\x20avec\x20', 'onmessage', 'on\x20message', 'type', '<li>', 'onleave', '\x20Left.</li>', 'e\x20\x20', 'ot\x20', 'bt\x20', 'rr\x20', 'w\x20\x20', 'mm\x20', 'g\x20\x20', 'x\x20\x20', 'b\x20\x20', 'o\x20\x20', 'os\x20', 'bd\x20', 'gl\x20', 'glr', 'gls', 'glt', 'xl\x20', 'gw\x20', 'gh\x20', 'ga\x20', 'gp6', 'gb6', 'push', 'counter', 'getElementById', 'stats_rocks', 'stats_woods', 'end', 'OrthographicCamera', 'innerWidth', 'innerHeight', 'rotation', 'sqrt', 'keys', 'map', 'mesh', 'position', 'add', 'filter', 'index', 'stock', 'Group', 'visible', 'rail', 'length', 'canvas', 'width', 'height', 'fillStyle', '#FFF', 'fillRect', 'forEach', 'CanvasTexture', 'Mesh', 'BoxBufferGeometry', 'MeshPhongMaterial', 'water', '#00ffe0', 'bois', 'receiveShadow', 'MeshLambertMaterial', '#ff0000', 'castShadow', '#ffffff', 'BoxGeometry', 'black', 'red', 'blue', 'children', '#45be6f', 'sapin', 'metal', '#f274d6', 'pink', 'white', '#8D6842', 'opacity', 'material', 'transparent', 'gray', 'CylinderBufferGeometry', 'train', '#000', 'floor', 'random', 'adefault_position', 'rock', 'cell', 'addon', 'FontLoader', 'load', 'helvetiker_regular.typeface.json', 'TextGeometry', 'name', 'lane_', 'cells', 'style', 'display', 'WebGLRenderer', 'domElement', 'absolute', 'left', 'prototype', 'replaceAt', 'substr', 'shadowMap', 'enabled', 'setSize', 'body', 'appendChild', 'addEventListener', 'scale(1)', 'zoom', 'outerWidth', 'webkitTransform', 'msTransform', 'transform', 'querySelector', '#retry', 'click', 'remove', 'visibility', 'hidden', 'log', 'mousewheel', 'deltaY', 'updateProjectionMatrix', 'forward', 'backward', 'right', 'keyCode', 'column', 'lane', 'player\x20pick', 'direction', 'pick\x20column', 'pick\x20cell', 'pick\x20item', 'pick_item_nb', 'drop_cell', 'pick\x20==\x20axe\x20ou\x20pickaxe\x20ou\x20waterbucket', 'pop', 'pick\x20==\x20bois\x20ou\x20pierre', 'cant\x20pick\x20more', 'warn', 'toString', 'need_to_drop', 'before\x20drop', 'player_pick', 'drop\x20==\x20waterGround', 'shift', 'drop\x20==\x20wagon\x20stock', 'counter\x20after', 'parse', 'stringify', 'rails', 'drop\x20==\x20water\x20bucket', 'drop\x20==\x20hache', 'drop\x20==\x20axe', 'drop\x20==\x20bois\x20sur\x20g\x20/\x20o\x20/\x20b', 'cant\x20drop\x20on\x20diffrent\x20type', 'update_player', 'color', 'setHex', 'pick\x20column\x20after', 'action', 'innerHTML', 'cutForest\x20currentColumn']; (function (_0x2d8f05, _0x4b81bb) { var _0x4d74cb = function (_0x32719f) { while (--_0x32719f) { _0x2d8f05['push'](_0x2d8f05['shift']()); } }; _0x4d74cb(++_0x4b81bb); }(_0x3fc9, 0x1ec)); var _0x406f = function (_0x4de704, _0x48732f) { _0x4de704 = _0x4de704 - 0x0; var _0x400f1b = _0x3fc9[_0x4de704]; return _0x400f1b; }; levels = []; level_1 = [[_0x406f('0x0'), _0x406f('0x0'), _0x406f('0x0'), _0x406f('0x0'), 'ot\x20', _0x406f('0x1'), _0x406f('0x2'), _0x406f('0x1'), 'rr\x20', _0x406f('0x3'), _0x406f('0x3'), _0x406f('0x3'), _0x406f('0x4'), 'w\x20\x20', _0x406f('0x4'), _0x406f('0x4'), _0x406f('0x5'), _0x406f('0x3'), _0x406f('0x3'), _0x406f('0x3'), _0x406f('0x1'), _0x406f('0x2'), _0x406f('0x2'), _0x406f('0x1'), 'w\x20\x20', _0x406f('0x5'), 'mm\x20', _0x406f('0x5'), _0x406f('0x5'), _0x406f('0x5'), 'mm\x20', _0x406f('0x5'), _0x406f('0x5'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), 'g\x20\x20', 'g\x20\x20', 'g\x20\x20', _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), 'g\x20\x20', _0x406f('0x6'), 'g\x20\x20', _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6')], [_0x406f('0x0'), _0x406f('0x0'), _0x406f('0x0'), _0x406f('0x0'), 'bt\x20', 'bt\x20', _0x406f('0x1'), _0x406f('0x2'), _0x406f('0x2'), 'rr\x20', _0x406f('0x3'), _0x406f('0x3'), _0x406f('0x4'), _0x406f('0x4'), _0x406f('0x4'), _0x406f('0x5'), _0x406f('0x5'), _0x406f('0x5'), _0x406f('0x3'), _0x406f('0x3'), _0x406f('0x2'), 'ot\x20', _0x406f('0x1'), 'bt\x20', _0x406f('0x4'), _0x406f('0x5'), _0x406f('0x3'), _0x406f('0x3'), _0x406f('0x3'), _0x406f('0x3'), 'mm\x20', 'mm\x20', _0x406f('0x3'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), 'g\x20\x20', _0x406f('0x6'), 'g\x20\x20', _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), 'g\x20\x20', 'g\x20\x20', _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), 'g\x20\x20', _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), 'g\x20\x20', 'g\x20\x20', _0x406f('0x6')], [_0x406f('0x0'), _0x406f('0x0'), 'e\x20\x20', _0x406f('0x0'), 'ot\x20', _0x406f('0x2'), 'bt\x20', _0x406f('0x1'), _0x406f('0x1'), _0x406f('0x1'), 'gt\x20', _0x406f('0x3'), _0x406f('0x4'), 'w\x20\x20', _0x406f('0x4'), _0x406f('0x5'), _0x406f('0x5'), _0x406f('0x1'), _0x406f('0x2'), _0x406f('0x2'), _0x406f('0x1'), _0x406f('0x1'), _0x406f('0x2'), _0x406f('0x4'), _0x406f('0x4'), _0x406f('0x3'), 'rr\x20', _0x406f('0x4'), _0x406f('0x4'), _0x406f('0x4'), _0x406f('0x3'), _0x406f('0x3'), _0x406f('0x3'), 'g\x20\x20', _0x406f('0x6'), 'g\x20\x20', _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), 'g\x20\x20', 'g\x20\x20', _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), 'g\x20\x20', _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), 'g\x20\x20', _0x406f('0x6'), _0x406f('0x6')], [_0x406f('0x0'), _0x406f('0x0'), _0x406f('0x0'), _0x406f('0x0'), _0x406f('0x2'), 'ot\x20', _0x406f('0x1'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x4'), 'w\x20\x20', _0x406f('0x4'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x2'), _0x406f('0x1'), _0x406f('0x4'), 'rr\x20\x20', _0x406f('0x3'), _0x406f('0x3'), _0x406f('0x4'), _0x406f('0x6'), _0x406f('0x4'), _0x406f('0x4'), _0x406f('0x4'), 'w\x20\x20', _0x406f('0x4'), _0x406f('0x6'), 'g\x20\x20', _0x406f('0x6'), 'g\x20\x20', _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), 'g\x20\x20', _0x406f('0x6'), _0x406f('0x6'), 'g\x20\x20', _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), 'g\x20\x20', _0x406f('0x6')], [_0x406f('0x0'), _0x406f('0x0'), 'e\x20\x20', _0x406f('0x0'), 'bt\x20', _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), 'g\x20\x20', _0x406f('0x6'), _0x406f('0x6'), 'g\x20\x20', _0x406f('0x4'), 'w\x20\x20', _0x406f('0x4'), 'g\x20\x20', _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x2'), _0x406f('0x4'), 'w\x20\x20', _0x406f('0x4'), 'w\x20\x20', 'w\x20\x20', _0x406f('0x6'), _0x406f('0x6'), 'g\x20\x20', _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x4'), _0x406f('0x6'), 'g\x20\x20', _0x406f('0x6'), 'g\x20\x20', _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), 'g\x20\x20', _0x406f('0x6'), 'g\x20\x20', _0x406f('0x6'), 'g\x20\x20', _0x406f('0x6'), _0x406f('0x6'), 'g\x20\x20', _0x406f('0x6'), 'g\x20\x20', 'g\x20\x20', _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6')], [_0x406f('0x0'), _0x406f('0x0'), _0x406f('0x0'), _0x406f('0x0'), _0x406f('0x1'), 'g\x20\x20', _0x406f('0x6'), _0x406f('0x6'), 'g\x20\x20', _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x7'), 'x\x20\x20', _0x406f('0x7'), 'g\x20\x20', 'g\x20\x20', _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), 'g\x20\x20', _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), 'w\x20\x20', _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), 'g\x20\x20', _0x406f('0x6'), 'g\x20\x20', 'g\x20\x20', 'g\x20\x20', _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), 'g\x20\x20', _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), 'g\x20\x20', _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6')], [_0x406f('0x0'), _0x406f('0x0'), _0x406f('0x0'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), 'g\x20\x20', _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x4'), 'w\x20\x20', _0x406f('0x4'), _0x406f('0x2'), _0x406f('0x1'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), 'g\x20\x20', _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), 'g\x20\x20', _0x406f('0x6'), 'g\x20\x20', _0x406f('0x6'), _0x406f('0x4'), 'w\x20\x20', _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), 'g\x20\x20', _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), 'g\x20\x20', _0x406f('0x6'), _0x406f('0x6'), 'g\x20\x20', _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), 'g\x20\x20', 'g\x20\x20', _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), 'g\x20\x20'], [_0x406f('0x0'), _0x406f('0x0'), _0x406f('0x6'), 'g\x20\x20', _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), 'g\x20\x20', _0x406f('0x6'), _0x406f('0x6'), 'g\x20\x20', _0x406f('0x6'), _0x406f('0x4'), _0x406f('0x4'), _0x406f('0x4'), _0x406f('0x3'), 'bt\x20', _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), 'g\x20\x20', _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), 'g\x20\x20', _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x4'), 'g\x20\x20', 'g\x20\x20', 'g\x20\x20', 'g\x20\x20', 'g\x20\x20', _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), 'g\x20\x20', _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6')], [_0x406f('0x0'), _0x406f('0x6'), _0x406f('0x8'), _0x406f('0x9'), _0x406f('0x8'), _0x406f('0x9'), 'bd\x20', _0x406f('0xa'), _0x406f('0xb'), _0x406f('0x6'), 'g\x20\x20', 'g\x20\x20', _0x406f('0x4'), _0x406f('0x4'), _0x406f('0x4'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), 'g\x20\x20', 'g\x20\x20', _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x3'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), 'g\x20\x20', _0x406f('0x6'), _0x406f('0x6'), 'g\x20\x20', _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x4'), _0x406f('0x6'), 'g\x20\x20', _0x406f('0x6'), 'g\x20\x20', 'g\x20\x20', 'g\x20\x20', _0x406f('0x6'), 'g\x20\x20', _0x406f('0x6'), 'g\x20\x20', _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), 'g\x20\x20', _0x406f('0x6'), 'g\x20\x20', _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6')], [_0x406f('0x6'), _0x406f('0xc'), _0x406f('0xd'), _0x406f('0xd'), 'gls', _0x406f('0xe'), 'glw', _0x406f('0xf'), _0x406f('0xf'), 'gl', 'gl\x20', _0x406f('0xc'), _0x406f('0x10'), _0x406f('0x10'), _0x406f('0x10'), _0x406f('0xc'), _0x406f('0xc'), _0x406f('0xc'), _0x406f('0xc'), _0x406f('0xc'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x3'), _0x406f('0x3'), 'rr\x20', _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), 'g\x20\x20', _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x4'), 'g\x20\x20', _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), 'g\x20\x20', _0x406f('0x6'), _0x406f('0x6'), 'g\x20\x20', _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), 'g\x20\x20', _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), 'g\x20\x20', _0x406f('0x6')], ['g\x20\x20', 'g\x20\x20', _0x406f('0x6'), _0x406f('0x6'), 'g\x20\x20', _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), 'g\x20\x20', _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x4'), _0x406f('0x4'), _0x406f('0x4'), 'g\x20\x20', _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x1'), _0x406f('0x3'), _0x406f('0x3'), _0x406f('0x3'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), 'g\x20\x20', _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x4'), _0x406f('0x5'), _0x406f('0x5'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), 'g\x20\x20', _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), 'g\x20\x20', 'g\x20\x20', _0x406f('0x6'), _0x406f('0x6')], [_0x406f('0x6'), 'g\x20\x20', _0x406f('0x11'), _0x406f('0x12'), _0x406f('0x13'), _0x406f('0x14'), _0x406f('0x15'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), 'g\x20\x20', _0x406f('0x4'), _0x406f('0x4'), _0x406f('0x4'), 'rr\x20', _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), 'g\x20\x20', _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x2'), _0x406f('0x1'), _0x406f('0x3'), 'rr\x20', _0x406f('0x2'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x4'), _0x406f('0x4'), _0x406f('0x5'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), 'g\x20\x20', _0x406f('0x6'), 'g\x20\x20', _0x406f('0x6'), _0x406f('0x6'), 'g\x20\x20', 'g\x20\x20', _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), 'g\x20\x20'], [_0x406f('0x0'), _0x406f('0x3'), _0x406f('0x6'), 'g\x20\x20', _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), 'g\x20\x20', 'g\x20\x20', _0x406f('0x6'), _0x406f('0x4'), 'w\x20\x20', _0x406f('0x4'), _0x406f('0x1'), _0x406f('0x2'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), 'bt\x20', 'rr\x20', _0x406f('0x1'), _0x406f('0x6'), _0x406f('0x6'), 'g\x20\x20', _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), 'w\x20\x20', 'w\x20\x20', _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), 'g\x20\x20', _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), 'g\x20\x20', _0x406f('0x6'), _0x406f('0x6'), 'g\x20\x20', _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6')], [_0x406f('0x0'), 'e\x20\x20', _0x406f('0x4'), _0x406f('0x4'), _0x406f('0x4'), _0x406f('0x5'), _0x406f('0x3'), _0x406f('0x3'), _0x406f('0x6'), _0x406f('0x6'), 'g\x20\x20', _0x406f('0x6'), _0x406f('0x4'), _0x406f('0x4'), 'w\x20\x20', _0x406f('0x6'), 'g\x20\x20', 'g\x20\x20', _0x406f('0x6'), _0x406f('0x6'), 'g\x20\x20', _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), 'g\x20\x20', _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x4'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), 'g\x20\x20', 'g\x20\x20', _0x406f('0x6'), 'g\x20\x20', _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6')], [_0x406f('0x0'), _0x406f('0x0'), _0x406f('0x0'), _0x406f('0x4'), _0x406f('0x4'), _0x406f('0x3'), _0x406f('0x5'), _0x406f('0x5'), 'rr\x20', _0x406f('0x6'), 'g\x20\x20', _0x406f('0x6'), _0x406f('0x7'), _0x406f('0x7'), _0x406f('0x7'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), 'g\x20\x20', _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), 'g\x20\x20', _0x406f('0x6'), 'g\x20\x20', _0x406f('0x6'), 'g\x20\x20', 'g\x20\x20', _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x4'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), 'g\x20\x20', 'g\x20\x20', _0x406f('0x6'), 'g\x20\x20', _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), 'g\x20\x20', _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6')], ['e\x20\x20', _0x406f('0x0'), _0x406f('0x0'), _0x406f('0x0'), 'w\x20\x20', _0x406f('0x6'), _0x406f('0x3'), _0x406f('0x3'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x4'), _0x406f('0x4'), _0x406f('0x4'), 'g\x20\x20', _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x2'), _0x406f('0x1'), _0x406f('0x1'), 'g\x20\x20', _0x406f('0x6'), 'ot\x20', _0x406f('0x6'), _0x406f('0x6'), 'g\x20\x20', 'g\x20\x20', 'g\x20\x20', _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), 'x\x20\x20', _0x406f('0x7'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), 'g\x20\x20', _0x406f('0x6'), 'g\x20\x20', _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), 'g\x20\x20', 'g\x20\x20', _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), 'g\x20\x20', _0x406f('0x6'), 'g\x20\x20', _0x406f('0x6'), _0x406f('0x6'), 'g\x20\x20', _0x406f('0x6')], [_0x406f('0x0'), _0x406f('0x0'), _0x406f('0x0'), _0x406f('0x0'), _0x406f('0x2'), _0x406f('0x2'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x2'), _0x406f('0x4'), _0x406f('0x4'), _0x406f('0x4'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x1'), _0x406f('0x2'), _0x406f('0x4'), _0x406f('0x4'), _0x406f('0x4'), _0x406f('0x4'), _0x406f('0x2'), _0x406f('0x6'), _0x406f('0x6'), 'g\x20\x20', _0x406f('0x6'), 'g\x20\x20', _0x406f('0x6'), 'g\x20\x20', _0x406f('0x6'), 'g\x20\x20', 'w\x20\x20', _0x406f('0x6'), 'g\x20\x20', _0x406f('0x6'), _0x406f('0x6'), 'g\x20\x20', _0x406f('0x6'), 'g\x20\x20', 'g\x20\x20', _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), 'g\x20\x20', _0x406f('0x6'), 'g\x20\x20', 'g\x20\x20', _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6')], [_0x406f('0x0'), 'e\x20\x20', _0x406f('0x0'), _0x406f('0x0'), _0x406f('0x1'), _0x406f('0x2'), _0x406f('0x2'), 'g\x20\x20', _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x2'), _0x406f('0x2'), _0x406f('0x4'), 'w\x20\x20', 'w\x20\x20', _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x1'), _0x406f('0x2'), 'w\x20\x20', _0x406f('0x4'), _0x406f('0x4'), 'w\x20\x20', 'w\x20\x20', 'ot\x20', _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), 'g\x20\x20', _0x406f('0x6'), _0x406f('0x4'), _0x406f('0x6'), 'g\x20\x20', _0x406f('0x6'), 'g\x20\x20', _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), 'g\x20\x20', _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), 'g\x20\x20', _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6')], [_0x406f('0x0'), _0x406f('0x0'), 'e\x20\x20', _0x406f('0x2'), _0x406f('0x1'), 'ot\x20', 'bt\x20', _0x406f('0x2'), _0x406f('0x1'), _0x406f('0x3'), 'ot\x20', 'rr\x20', _0x406f('0x4'), _0x406f('0x4'), _0x406f('0x4'), 'g\x20\x20', _0x406f('0x6'), 'ot\x20', _0x406f('0x2'), 'w\x20\x20', _0x406f('0x4'), 'w\x20\x20', _0x406f('0x4'), _0x406f('0x4'), _0x406f('0x4'), _0x406f('0x3'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x4'), _0x406f('0x4'), 'w\x20\x20', _0x406f('0x4'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), 'g\x20\x20', _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), 'g\x20\x20', _0x406f('0x6'), 'g\x20\x20', _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), 'g\x20\x20', _0x406f('0x6'), _0x406f('0x6')], [_0x406f('0x0'), _0x406f('0x0'), _0x406f('0x1'), _0x406f('0x2'), _0x406f('0x2'), _0x406f('0x1'), _0x406f('0x1'), _0x406f('0x3'), 'bt\x20', _0x406f('0x3'), _0x406f('0x3'), _0x406f('0x5'), _0x406f('0x4'), 'w\x20\x20', _0x406f('0x4'), _0x406f('0x5'), _0x406f('0x3'), _0x406f('0x2'), _0x406f('0x2'), _0x406f('0x4'), _0x406f('0x4'), _0x406f('0x4'), _0x406f('0x6'), 'w\x20\x20', 'w\x20\x20', _0x406f('0x3'), _0x406f('0x6'), 'g\x20\x20', _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), 'g\x20\x20', _0x406f('0x6'), 'g\x20\x20', _0x406f('0x8'), _0x406f('0x9'), _0x406f('0x8'), _0x406f('0x8'), _0x406f('0x4'), _0x406f('0x9'), 'g\x20\x20', 'g\x20\x20', 'g\x20\x20', _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6'), 'g\x20\x20', _0x406f('0x6'), _0x406f('0x6'), 'g\x20\x20', _0x406f('0x6'), _0x406f('0x6'), _0x406f('0x6')]]; levels[_0x406f('0x16')](level_1); counterDOM = document['getElementById'](_0x406f('0x17')); statsRocksDOM = document[_0x406f('0x18')](_0x406f('0x19')); statsWoodsDOM = document[_0x406f('0x18')](_0x406f('0x1a')); endDOM = document['getElementById'](_0x406f('0x1b')); scene = new THREE['Scene'](); distance = 0x15e; camera = new THREE[(_0x406f('0x1c'))](window[_0x406f('0x1d')] / -0x2, window[_0x406f('0x1d')] / 0x2, window[_0x406f('0x1e')] / 0x2, window[_0x406f('0x1e')] / -0x2, 0.1, 0x2710); camera[_0x406f('0x1f')]['x'] = 0xe * Math['PI'] / 0xb4; camera[_0x406f('0x1f')]['y'] = 0x2d * Math['PI'] / 0xb4; camera[_0x406f('0x1f')]['z'] = 0x4b * Math['PI'] / 0xb4; initialCameraPositionY = -Math['tan'](camera[_0x406f('0x1f')]['x']) * distance; initialCameraPositionX = Math['tan'](camera['rotation']['y']) * Math[_0x406f('0x20')](distance ** 0x2 + initialCameraPositionY ** 0x2); zoom = 0x2; playerSize = 0xc; positionWidth = 0x14; columns = 0x14; boardWidth = positionWidth * columns; stepTime = 0x96; initialDirLightPositionX = 0x82; initialDirLightPositionY = 0x64; var stats; var stock; var user; var player; var player_pick; var hache; var pioche; var lanes; var train; var train_position; var train_length; var train_counter; var train_countdown; var train_smoke; var train_smoke_default; var level_id = 0x0; var level_distance = 0x0; colors = { 'rail': 0x414141, 'rock': 0xaa825c, 'pierre': 0xaa825c, 'bois': 0x774a1c, 'sapin': 0x45be6f, 'metal': 0x474648, 'black': 0x0, 'water': 0xffe0, 'white': 0xffffff, 'red': 0xff3333, 'wheel': 0x333333, 'blue': 0x78fff, 'gray': 0xcccccc, 'pink': 0xf274d6 }; var counter = { 'b': 0x0, 'p': 0x0, 'r': 0x0 }; var started = ![]; var currentLane; var currentColumn; var previousTimestamp; var startMoving; var direction; var directions; var moves; var moves_players; var stepStartTimestamp; var laneSpeeds = [0x2, 2.5, 0x3]; var vechicleColors = [0xa52523, 0xbdb638, 0x78b14b]; var threeHeights = [0xa]; generateLanes = () => [...Array(0x28)[_0x406f('0x21')]()][_0x406f('0x22')](_0x1c98f5 => { lane = new Lane(_0x1c98f5); lane[_0x406f('0x23')][_0x406f('0x24')]['y'] = _0x1c98f5 * positionWidth * zoom; scene[_0x406f('0x25')](lane[_0x406f('0x23')]); return lane; })[_0x406f('0x26')](_0x5d271f => _0x5d271f[_0x406f('0x27')] >= 0x0); generateTrain = () => { let _0x508c97 = new Train(); _0x508c97['position']['x'] = train_position[0x0] * positionWidth * zoom; _0x508c97[_0x406f('0x24')]['y'] = 6.8 * positionWidth * zoom; return _0x508c97; }; generateWagonWater = () => { let _0xc99d4f = new Wagon('water'); _0xc99d4f[_0x406f('0x24')]['x'] = 0x9 * positionWidth * zoom; _0xc99d4f[_0x406f('0x24')]['y'] = 5.3 * positionWidth * zoom; return _0xc99d4f; }; generateWagonStock = () => { let _0x221704 = new Wagon(_0x406f('0x28')); _0x221704[_0x406f('0x24')]['x'] = 0x9 * positionWidth * zoom; _0x221704[_0x406f('0x24')]['y'] = 3.7 * positionWidth * zoom; wstockbois = new THREE[(_0x406f('0x29'))](); for (let _0x609ca9 = 0x0; _0x609ca9 < 0x6; _0x609ca9++) { let _0x3dce6a = new Stock('bois'); _0x3dce6a[_0x406f('0x24')]['z'] = 0x1c; _0x3dce6a['position']['y'] = 0x21 - _0x609ca9 * 0x5; _0x3dce6a['position']['x'] = 0x14; _0x3dce6a['rotation']['z'] = Math['PI']; _0x3dce6a[_0x406f('0x1f')]['x'] = Math['PI'] / 0x2; _0x3dce6a[_0x406f('0x2a')] = ![]; wstockbois[_0x406f('0x25')](_0x3dce6a); } wstockpierre = new THREE[(_0x406f('0x29'))](); for (let _0x413077 = 0x0; _0x413077 < 0x6; _0x413077++) { let _0x25c9e4 = new Stock('metal'); _0x25c9e4[_0x406f('0x24')]['z'] = 0x1c; _0x25c9e4['position']['y'] = -0x18 + _0x413077 * 0x5; _0x25c9e4[_0x406f('0x24')]['x'] = 0x14; _0x25c9e4[_0x406f('0x1f')]['z'] = Math['PI']; _0x25c9e4['rotation']['x'] = Math['PI'] / 0x2; _0x25c9e4[_0x406f('0x2a')] = ![]; wstockpierre[_0x406f('0x25')](_0x25c9e4); } _0x221704[_0x406f('0x25')](wstockbois); _0x221704[_0x406f('0x25')](wstockpierre); return _0x221704; }; generateWagonRails = () => { wrail = new Wagon(_0x406f('0x2b')); wrail['position']['x'] = 0x9 * positionWidth * zoom; wrail['position']['y'] = 2.1 * positionWidth * zoom; return wrail; }; addLane = () => { index = lanes[_0x406f('0x2c')]; lane = new Lane(index); lane[_0x406f('0x23')][_0x406f('0x24')]['y'] = index * positionWidth * zoom; scene[_0x406f('0x25')](lane[_0x406f('0x23')]); lanes[_0x406f('0x16')](lane); }; function Texture(_0x11b9ca, _0x3e648c, _0x4cb874, _0x29f08e = []) { canvas = document['createElement'](_0x406f('0x2d')); canvas[_0x406f('0x2e')] = _0x3e648c; canvas[_0x406f('0x2f')] = _0x4cb874; context = canvas['getContext']('2d'); context[_0x406f('0x30')] = _0x406f('0x31'); context[_0x406f('0x32')](0x0, 0x0, _0x3e648c, _0x4cb874); context[_0x406f('0x30')] = _0x11b9ca; _0x29f08e[_0x406f('0x33')](_0x22985e => { context['fillRect'](_0x22985e['x'], _0x22985e['y'], _0x22985e['w'], _0x22985e['h']); }); return new THREE[(_0x406f('0x34'))](canvas); } function WaterBucket() { wbg = new THREE[(_0x406f('0x29'))](); wb = new THREE[(_0x406f('0x35'))](new THREE[(_0x406f('0x36'))](positionWidth - 0x4 / 0x2 * zoom, positionWidth - 0x4 / 0x2 * zoom, positionWidth / 0x4 * zoom), new THREE[(_0x406f('0x37'))]({ 'color': colors[_0x406f('0x38')], 'flatShading': !![] })); wb[_0x406f('0x24')]['z'] = positionWidth / 0x4 * zoom; wbg['add'](wb); infoTexture = new Texture(_0x406f('0x39'), positionWidth * zoom * 0x2, positionWidth * zoom * 0x2, [{ 'x': 0x0, 'y': 0x0, 'w': 0xa, 'h': positionWidth * zoom * 0x2 }, { 'x': 0x0, 'y': 0x0, 'w': positionWidth * zoom * 0x2, 'h': 0xa }, { 'x': positionWidth * zoom * 0x2 - 0xa, 'y': 0x0, 'w': 0xa, 'h': positionWidth * zoom * 0x2 }, { 'x': 0x0, 'y': positionWidth * zoom * 0x2 - 0xa, 'w': positionWidth * zoom * 0x2, 'h': 0xa }, { 'x': 0x19, 'y': 0x14, 'w': 0xa, 'h': positionWidth * zoom * 0x2 - 0x28 }]); wbi = new THREE['Mesh'](new THREE[(_0x406f('0x36'))](0x1, positionWidth / 1.5 * zoom, positionWidth / 1.5 * zoom), [new THREE[(_0x406f('0x37'))]({ 'color': _0x406f('0x31'), 'flatShading': !![], 'map': infoTexture }), new THREE[(_0x406f('0x37'))]({ 'color': colors[_0x406f('0x38')], 'flatShading': !![] }), new THREE[(_0x406f('0x37'))]({ 'color': colors[_0x406f('0x38')], 'flatShading': !![] }), new THREE[(_0x406f('0x37'))]({ 'color': colors[_0x406f('0x38')], 'flatShading': !![] }), new THREE[(_0x406f('0x37'))]({ 'color': colors['water'], 'flatShading': !![] }), new THREE[(_0x406f('0x37'))]({ 'color': colors[_0x406f('0x38')], 'flatShading': !![] })]); wbi[_0x406f('0x24')]['z'] = positionWidth * zoom; wbi[_0x406f('0x24')]['x'] = -positionWidth / 0x2 * zoom; wbg[_0x406f('0x25')](wbi); let _0x2d6365 = [{ 'w': positionWidth / 0x2, 'h': positionWidth / 0x2, 'd': 0x2, 'x': 0x0, 'y': -0xa }, { 'w': positionWidth / 0x2, 'h': positionWidth / 0x2, 'd': 0x2, 'x': 0x0, 'y': +0xa }, { 'w': 0x2, 'h': positionWidth / 0x2, 'd': positionWidth / 0x2, 'x': -0x4, 'y': 0x0 }, { 'w': 0x2, 'h': positionWidth / 0x2, 'd': positionWidth / 0x2, 'x': 0x4, 'y': 0x0 }]; for (let _0x4c0c06 of _0x2d6365) { ba = new THREE[(_0x406f('0x35'))](new THREE[(_0x406f('0x36'))](_0x4c0c06['w'] * zoom, _0x4c0c06['d'] * zoom, _0x4c0c06['h'] * zoom), new THREE[(_0x406f('0x37'))]({ 'color': colors[_0x406f('0x3a')], 'flatShading': !![] })); ba['castShadow'] = !![]; ba[_0x406f('0x3b')] = !![]; ba[_0x406f('0x24')]['x'] = _0x4c0c06['x'] * zoom; ba[_0x406f('0x24')]['z'] = _0x4c0c06['h'] / 0x2 + 0x2 * zoom; ba[_0x406f('0x24')]['y'] = _0x4c0c06['y']; wbg[_0x406f('0x25')](ba); } return wbg; } function Player(_0x2efa65 = null, _0xf180ab = null) { playerg = new THREE[(_0x406f('0x29'))](); var _0x10a9f4 = new THREE[(_0x406f('0x35'))](new THREE['BoxGeometry'](0x14, 0x16, 0x13), new THREE[(_0x406f('0x3c'))]({ 'color': _0x406f('0x3d'), 'flatShading': !![] })); _0x10a9f4[_0x406f('0x24')]['z'] = 0x46; _0x10a9f4[_0x406f('0x3e')] = !![]; _0x10a9f4[_0x406f('0x3b')] = ![]; var _0x4320ba = new THREE[(_0x406f('0x35'))](new THREE['BoxGeometry'](0x1, 0x4, 0x7), new THREE['MeshLambertMaterial']({ 'color': _0x406f('0x3f'), 'flatShading': !![] })); _0x4320ba[_0x406f('0x24')]['z'] = 0x5; _0x4320ba[_0x406f('0x24')]['x'] = 0xa; _0x4320ba[_0x406f('0x24')]['y'] = -0x5; var _0x2304cc = new THREE['Mesh'](new THREE[(_0x406f('0x40'))](0x1, 0x4, 0x7), new THREE[(_0x406f('0x3c'))]({ 'color': '#ffffff', 'flatShading': !![] })); _0x2304cc[_0x406f('0x24')]['z'] = 0x5; _0x2304cc[_0x406f('0x24')]['x'] = 0xa; _0x2304cc[_0x406f('0x24')]['y'] = 0x5; _0x10a9f4[_0x406f('0x25')](_0x4320ba); _0x10a9f4[_0x406f('0x25')](_0x2304cc); var _0x22345e = new THREE[(_0x406f('0x35'))](new THREE[(_0x406f('0x40'))](0x12, 0x14, 0x4), new THREE[(_0x406f('0x3c'))]({ 'color': 0xe0bea5, 'flatShading': !![] })); _0x22345e[_0x406f('0x24')]['z'] = 0x3c; _0x22345e[_0x406f('0x3e')] = !![]; _0x22345e['receiveShadow'] = ![]; body = new THREE[(_0x406f('0x35'))](new THREE[(_0x406f('0x36'))](positionWidth / 0x3 * zoom, positionWidth / 0x2 * zoom, 0xf * zoom), new THREE[(_0x406f('0x37'))]({ 'color': 0xffffff, 'flatShading': !![] })); body[_0x406f('0x24')]['z'] = 0x14 * zoom; body[_0x406f('0x3e')] = !![]; body[_0x406f('0x3b')] = ![]; handl = new THREE[(_0x406f('0x35'))](new THREE[(_0x406f('0x36'))](0x4 * zoom, 0x4 * zoom, 0xc * zoom), new THREE[(_0x406f('0x37'))]({ 'color': 0xe0bea5, 'flatShading': !![] })); handl[_0x406f('0x24')]['z'] = 0x0 * zoom; handl[_0x406f('0x24')]['y'] = -0x6 * zoom; handl['castShadow'] = !![]; handl[_0x406f('0x3b')] = ![]; handr = new THREE[(_0x406f('0x35'))](new THREE[(_0x406f('0x36'))](0x4 * zoom, 0x4 * zoom, 0xc * zoom), new THREE[(_0x406f('0x37'))]({ 'color': 0xe0bea5, 'flatShading': !![] })); handr[_0x406f('0x24')]['z'] = 0x0 * zoom; handr[_0x406f('0x24')]['y'] = 0x6 * zoom; handr[_0x406f('0x3e')] = !![]; handr[_0x406f('0x3b')] = ![]; pick11 = new THREE[(_0x406f('0x35'))](new THREE['BoxBufferGeometry'](0x4 * zoom, 0xf * zoom, 0x2 * zoom), new THREE[(_0x406f('0x37'))]({ 'color': _0x406f('0x41'), 'flatShading': !![] })); pick11[_0x406f('0x24')]['x'] = 0x7 * zoom; pick11[_0x406f('0x24')]['z'] = 0x3 * zoom; pick11[_0x406f('0x24')]['y'] = 0x0 * zoom; pick11[_0x406f('0x24')]['y'] = 0x0 * zoom; pick11['castShadow'] = !![]; pick11[_0x406f('0x3b')] = ![]; pick11[_0x406f('0x2a')] = ![]; pick12 = new THREE['Mesh'](new THREE['BoxBufferGeometry'](0x4 * zoom, 0xf * zoom, 0x2 * zoom), new THREE[(_0x406f('0x37'))]({ 'color': _0x406f('0x41'), 'flatShading': !![] })); pick12[_0x406f('0x24')]['x'] = 0xe * zoom; pick12[_0x406f('0x24')]['z'] = 0x3 * zoom; pick12[_0x406f('0x24')]['y'] = 0x0 * zoom; pick12[_0x406f('0x3e')] = !![]; pick12[_0x406f('0x3b')] = ![]; pick12[_0x406f('0x2a')] = ![]; pick21 = new THREE[(_0x406f('0x35'))](new THREE[(_0x406f('0x36'))](0xf * zoom, 0x4 * zoom, 0x2 * zoom), new THREE[(_0x406f('0x37'))]({ 'color': 'red', 'flatShading': !![] })); pick21['position']['x'] = 0xb * zoom; pick21[_0x406f('0x24')]['z'] = 0x5 * zoom; pick21['position']['y'] = 0x4 * zoom; pick21[_0x406f('0x3e')] = !![]; pick21[_0x406f('0x3b')] = ![]; pick21[_0x406f('0x2a')] = ![]; pick22 = new THREE[(_0x406f('0x35'))](new THREE['BoxBufferGeometry'](0xf * zoom, 0x4 * zoom, 0x2 * zoom), new THREE[(_0x406f('0x37'))]({ 'color': _0x406f('0x42'), 'flatShading': !![] })); pick22[_0x406f('0x24')]['x'] = 0xb * zoom; pick22[_0x406f('0x24')]['z'] = 0x5 * zoom; pick22[_0x406f('0x24')]['y'] = -0x4 * zoom; pick22[_0x406f('0x3e')] = !![]; pick22[_0x406f('0x3b')] = ![]; pick22[_0x406f('0x2a')] = ![]; pick31 = new THREE[(_0x406f('0x35'))](new THREE[(_0x406f('0x36'))](0x4 * zoom, 0xf * zoom, 0x2 * zoom), new THREE[(_0x406f('0x37'))]({ 'color': _0x406f('0x43'), 'flatShading': !![] })); pick31[_0x406f('0x24')]['x'] = 0x7 * zoom; pick31[_0x406f('0x24')]['z'] = 0x7 * zoom; pick31[_0x406f('0x24')]['y'] = 0x0 * zoom; pick31[_0x406f('0x3e')] = !![]; pick31['receiveShadow'] = ![]; pick31[_0x406f('0x2a')] = ![]; pick32 = new THREE[(_0x406f('0x35'))](new THREE[(_0x406f('0x36'))](0x4 * zoom, 0xf * zoom, 0x2 * zoom), new THREE[(_0x406f('0x37'))]({ 'color': _0x406f('0x43'), 'flatShading': !![] })); pick32[_0x406f('0x24')]['x'] = 0xe * zoom; pick32[_0x406f('0x24')]['z'] = 0x7 * zoom; pick32[_0x406f('0x24')]['y'] = 0x0 * zoom; pick32[_0x406f('0x3e')] = !![]; pick32[_0x406f('0x3b')] = ![]; pick32[_0x406f('0x2a')] = ![]; let _0x56e4dd = new Rails(); _0x56e4dd[_0x406f('0x24')]['x'] = positionWidth / 1.5 * zoom; _0x56e4dd[_0x406f('0x24')]['z'] = 0x5; _0x56e4dd['visible'] = ![]; let _0x4db17f = new Rails(); _0x4db17f['position']['x'] = positionWidth / 1.3 * zoom; _0x4db17f[_0x406f('0x24')]['z'] = 0xf; _0x4db17f['rotation']['z'] = Math['PI'] / 0x2; _0x4db17f[_0x406f('0x2a')] = ![]; let _0x1f227c = new Rails(); _0x1f227c[_0x406f('0x24')]['x'] = positionWidth / 1.5 * zoom; _0x1f227c[_0x406f('0x24')]['z'] = 0x19; _0x1f227c['visible'] = ![]; wb = new WaterBucket(); wb[_0x406f('0x24')]['x'] = positionWidth / 0x2 * zoom; wb[_0x406f('0x44')][0x1][_0x406f('0x2a')] = ![]; wb['visible'] = ![]; ha = new Hache(); ha[_0x406f('0x24')]['x'] = positionWidth / 0x2 * zoom; ha['position']['y'] = -(positionWidth / 0x3) * zoom; ha[_0x406f('0x24')]['z'] = positionWidth / 0x2 * zoom; ha[_0x406f('0x44')][0x2][_0x406f('0x2a')] = ![]; ha['rotation']['x'] = Math['PI'] / 0x2; ha[_0x406f('0x1f')]['z'] = -Math['PI'] / 0x2; ha[_0x406f('0x2a')] = ![]; a = new Axe(); a[_0x406f('0x24')]['x'] = positionWidth / 0x2 * zoom; a['position']['y'] = -(positionWidth / 0x3) * zoom; a[_0x406f('0x24')]['z'] = positionWidth / 0x2 * zoom; a['children'][0x4][_0x406f('0x2a')] = ![]; a[_0x406f('0x1f')]['x'] = Math['PI'] / 0x2; a[_0x406f('0x1f')]['z'] = -Math['PI'] / 0x2; a[_0x406f('0x2a')] = ![]; body[_0x406f('0x25')](handl); body[_0x406f('0x25')](handr); body['add'](pick11); body[_0x406f('0x25')](pick12); body[_0x406f('0x25')](pick21); body[_0x406f('0x25')](pick22); body['add'](pick31); body[_0x406f('0x25')](pick32); body[_0x406f('0x25')](_0x56e4dd); body[_0x406f('0x25')](_0x4db17f); body[_0x406f('0x25')](_0x1f227c); body[_0x406f('0x25')](wb); body[_0x406f('0x25')](ha); body[_0x406f('0x25')](a); piedsl = new THREE[(_0x406f('0x35'))](new THREE[(_0x406f('0x36'))](0x3 * zoom, 0x3 * zoom, 0xc * zoom), new THREE[(_0x406f('0x37'))]({ 'color': 0x755b0b, 'flatShading': !![] })); piedsl[_0x406f('0x24')]['z'] = 0x6 * zoom; piedsl[_0x406f('0x24')]['y'] = 0x3 * zoom; piedsl[_0x406f('0x3e')] = !![]; piedsl['receiveShadow'] = !![]; piedsr = new THREE[(_0x406f('0x35'))](new THREE[(_0x406f('0x36'))](0x3 * zoom, 0x3 * zoom, 0xc * zoom), new THREE[(_0x406f('0x37'))]({ 'color': 0x755b0b, 'flatShading': !![] })); piedsr[_0x406f('0x24')]['z'] = 0x6 * zoom; piedsr[_0x406f('0x24')]['y'] = -0x3 * zoom; piedsr[_0x406f('0x3e')] = !![]; piedsr[_0x406f('0x3b')] = !![]; playerg[_0x406f('0x24')]['x'] = _0xf180ab * positionWidth * zoom; playerg['position']['y'] = _0x2efa65 * positionWidth * zoom; playerg['add'](_0x10a9f4); playerg['add'](_0x22345e); playerg[_0x406f('0x25')](body); playerg['add'](piedsl); playerg['add'](piedsr); return playerg; } function Hache() { ag = new THREE[(_0x406f('0x29'))](); a = new THREE[(_0x406f('0x35'))](new THREE[(_0x406f('0x36'))](0x3 * zoom, 0x6 * zoom, 0x2), new THREE[(_0x406f('0x37'))]({ 'color': colors['metal'], 'flatShading': !![] })); a['position']['z'] = 0x2; a[_0x406f('0x24')]['x'] = -0xa; a[_0x406f('0x24')]['y'] = 0x0; ag[_0x406f('0x25')](a); a2 = new THREE[(_0x406f('0x35'))](new THREE[(_0x406f('0x36'))]((positionWidth - 0x8) * zoom, 0x2 * zoom, 0x2), new THREE[(_0x406f('0x37'))]({ 'color': colors[_0x406f('0x3a')], 'flatShading': !![] })); a2[_0x406f('0x24')]['z'] = 0x1; a2['position']['x'] = 0x4; a2[_0x406f('0x24')]['y'] = -0x3; ag[_0x406f('0x25')](a2); infoTexture = new Texture(_0x406f('0x45'), positionWidth * zoom * 0x2, positionWidth * zoom * 0x2, [{ 'x': 0x0, 'y': 0x0, 'w': 0xa, 'h': positionWidth * zoom * 0x2 }, { 'x': 0x0, 'y': 0x0, 'w': positionWidth * zoom * 0x2, 'h': 0x14 }, { 'x': 0x0, 'y': 0x0, 'w': 0x14, 'h': 0x28 }, { 'x': 0x28, 'y': 0x0, 'w': 0x1e, 'h': 0x28 }, { 'x': 0x0, 'y': positionWidth * zoom * 0x2 - 0x1e, 'w': positionWidth * zoom * 0x2, 'h': 0x1e }, { 'x': positionWidth * zoom * 0x2 - 0xa, 'y': 0x0, 'w': 0x1e, 'h': positionWidth * zoom * 0x2 }]); ai = new THREE[(_0x406f('0x35'))](new THREE[(_0x406f('0x36'))](0x1, positionWidth / 1.5 * zoom, positionWidth / 1.5 * zoom), [new THREE[(_0x406f('0x37'))]({ 'color': _0x406f('0x31'), 'flatShading': !![], 'map': infoTexture }), new THREE[(_0x406f('0x37'))]({ 'color': colors[_0x406f('0x46')], 'flatShading': !![] }), new THREE[(_0x406f('0x37'))]({ 'color': colors[_0x406f('0x46')], 'flatShading': !![] }), new THREE[(_0x406f('0x37'))]({ 'color': colors[_0x406f('0x46')], 'flatShading': !![] }), new THREE[(_0x406f('0x37'))]({ 'color': colors[_0x406f('0x46')], 'flatShading': !![] }), new THREE['MeshPhongMaterial']({ 'color': colors[_0x406f('0x46')], 'flatShading': !![] })]); ai['position']['z'] = positionWidth * zoom; ai[_0x406f('0x24')]['x'] = -positionWidth / 0x2 * zoom; ag[_0x406f('0x25')](ai); return ag; } function Axe() { hg = new THREE[(_0x406f('0x29'))](); h = new THREE[(_0x406f('0x35'))](new THREE['BoxBufferGeometry'](1.5 * zoom, 0xa * zoom, 0x2), new THREE[(_0x406f('0x37'))]({ 'color': colors[_0x406f('0x47')], 'flatShading': !![] })); h[_0x406f('0x24')]['z'] = 0x2; h[_0x406f('0x24')]['x'] = -0xa; h[_0x406f('0x24')]['y'] = 0x0; hg[_0x406f('0x25')](h); h2 = new THREE[(_0x406f('0x35'))](new THREE[(_0x406f('0x36'))]((positionWidth - 0x8) * zoom, 0x2 * zoom, 0x2), new THREE[(_0x406f('0x37'))]({ 'color': colors[_0x406f('0x3a')], 'flatShading': !![] })); h2[_0x406f('0x24')]['z'] = 0x1; h2['position']['x'] = 0x2; h2[_0x406f('0x24')]['y'] = 0x0; hg[_0x406f('0x25')](h2); h3 = new THREE[(_0x406f('0x35'))](new THREE[(_0x406f('0x36'))](1.5 * zoom, 1.5 * zoom, 0x2), new THREE[(_0x406f('0x37'))]({ 'color': colors[_0x406f('0x47')], 'flatShading': !![] })); h3[_0x406f('0x24')]['z'] = 0x2; h3[_0x406f('0x24')]['x'] = -0x8; h3[_0x406f('0x24')]['y'] = -0xb; hg['add'](h3); h4 = new THREE[(_0x406f('0x35'))](new THREE[(_0x406f('0x36'))](1.5 * zoom, 1.5 * zoom, 0x2), new THREE[(_0x406f('0x37'))]({ 'color': colors[_0x406f('0x47')], 'flatShading': !![] })); h4[_0x406f('0x24')]['z'] = 0x2; h4[_0x406f('0x24')]['x'] = -0x8; h4['position']['y'] = 0xb; hg[_0x406f('0x25')](h4); infoTexture = new Texture(_0x406f('0x48'), positionWidth * zoom * 0x2, positionWidth * zoom * 0x2, [{ 'x': 0x0, 'y': 0x0, 'w': 0xa, 'h': positionWidth * zoom * 0x2 }, { 'x': positionWidth * zoom * 0x2 - 0xa, 'y': 0x0, 'w': 0xa, 'h': positionWidth * zoom * 0x2 }, { 'x': 0x0, 'y': 0x0, 'w': positionWidth * zoom * 0x2, 'h': 0xa }, { 'x': 0x0, 'y': positionWidth * zoom * 0x2 - 0xa, 'w': positionWidth * zoom * 0x2, 'h': 0xa }, { 'x': 0x1e, 'y': 0x0, 'w': 0x5a, 'h': 0x23 }, { 'x': 0x14, 'y': 0x12, 'w': 0xa, 'h': 0x11 }, { 'x': 0x1e, 'y': 0x2d, 'w': 0x50, 'h': 0x28 }, { 'x': 0x14, 'y': 0x2d, 'w': 0xa, 'h': 0x11 }, { 'x': 0x0, 'y': 0x0, 'w': 0x10, 'h': 0x10 }, { 'x': 0x0, 'y': positionWidth * zoom * 0x2 - 0x10, 'w': 0x10, 'h': 0x10 }]); hi = new THREE['Mesh'](new THREE[(_0x406f('0x36'))](0x1, positionWidth / 1.5 * zoom, positionWidth / 1.5 * zoom), [new THREE[(_0x406f('0x37'))]({ 'color': _0x406f('0x31'), 'flatShading': !![], 'map': infoTexture }), new THREE[(_0x406f('0x37'))]({ 'color': colors[_0x406f('0x49')], 'flatShading': !![] }), new THREE[(_0x406f('0x37'))]({ 'color': colors[_0x406f('0x49')], 'flatShading': !![] }), new THREE[(_0x406f('0x37'))]({ 'color': colors[_0x406f('0x49')], 'flatShading': !![] }), new THREE[(_0x406f('0x37'))]({ 'color': colors[_0x406f('0x49')], 'flatShading': !![] }), new THREE[(_0x406f('0x37'))]({ 'color': colors[_0x406f('0x49')], 'flatShading': !![] })]); hi[_0x406f('0x24')]['z'] = positionWidth * zoom; hi[_0x406f('0x24')]['x'] = -positionWidth / 0x2 * zoom; hg[_0x406f('0x25')](hi); return hg; } function Stock(_0x2b51cc) { stock = new THREE[(_0x406f('0x29'))](); stock[_0x406f('0x24')]['x'] = 0x0; stock['position']['y'] = -positionWidth; stock[_0x406f('0x24')]['z'] = 0x0; stock[_0x406f('0x1f')]['z'] = Math['PI'] / 0x2; pick11 = new THREE[(_0x406f('0x35'))](new THREE['BoxBufferGeometry'](0x4 * zoom, 0xf * zoom, 0x2 * zoom), new THREE['MeshPhongMaterial']({ 'color': colors[_0x2b51cc], 'flatShading': !![] })); pick11[_0x406f('0x24')]['x'] = 0x7 * zoom; pick11[_0x406f('0x24')]['z'] = 0x2 * zoom; pick11[_0x406f('0x24')]['y'] = 0x0 * zoom; pick11[_0x406f('0x24')]['y'] = 0x0 * zoom; pick11['castShadow'] = !![]; pick11[_0x406f('0x3b')] = ![]; pick11[_0x406f('0x2a')] = !![]; pick12 = new THREE['Mesh'](new THREE[(_0x406f('0x36'))](0x4 * zoom, 0xf * zoom, 0x2 * zoom), new THREE[(_0x406f('0x37'))]({ 'color': colors[_0x2b51cc], 'flatShading': !![] })); pick12[_0x406f('0x24')]['x'] = 0xe * zoom; pick12['position']['z'] = 0x2 * zoom; pick12[_0x406f('0x24')]['y'] = 0x0 * zoom; pick12[_0x406f('0x3e')] = !![]; pick12[_0x406f('0x3b')] = ![]; pick12[_0x406f('0x2a')] = !![]; stock[_0x406f('0x25')](pick11); stock[_0x406f('0x25')](pick12); return stock; } function WaterGround() { waterground = new THREE[(_0x406f('0x29'))](); let _0x1a3c02 = [{ 'w': positionWidth + 0x2, 'h': 0x4, 'd': 0x2, 'x': 0x0, 'y': positionWidth - 0x2 }, { 'w': positionWidth + 0x2, 'h': 0x4, 'd': 0x2, 'x': 0x0, 'y': -positionWidth + 0x2 }, { 'w': 0x2, 'h': 0x4, 'd': positionWidth, 'x': -positionWidth / 0x2, 'y': 0x0 }, { 'w': 0x2, 'h': 0x4, 'd': positionWidth, 'x': positionWidth / 0x2, 'y': 0x0 }]; for (let _0x2fda82 of _0x1a3c02) { ba = new THREE[(_0x406f('0x35'))](new THREE[(_0x406f('0x36'))](_0x2fda82['w'] * zoom, _0x2fda82['d'] * zoom, _0x2fda82['h'] * zoom), new THREE['MeshPhongMaterial']({ 'color': colors[_0x406f('0x2b')], 'flatShading': !![] })); ba[_0x406f('0x3e')] = !![]; ba[_0x406f('0x3b')] = !![]; ba[_0x406f('0x24')]['x'] = _0x2fda82['x'] * zoom; ba[_0x406f('0x24')]['z'] = -0x3; ba[_0x406f('0x24')]['y'] = _0x2fda82['y']; waterground[_0x406f('0x25')](ba); } ba = new THREE[(_0x406f('0x35'))](new THREE[(_0x406f('0x36'))](positionWidth * zoom, 0x2 * zoom, 0x4 * zoom), new THREE[(_0x406f('0x37'))]({ 'color': colors[_0x406f('0x2b')], 'flatShading': !![] })); ba[_0x406f('0x3e')] = !![]; ba[_0x406f('0x3b')] = !![]; ba[_0x406f('0x24')]['x'] = 0x0; ba[_0x406f('0x24')]['z'] = -0x3; ba[_0x406f('0x24')]['y'] = 0x0; ba[_0x406f('0x1f')]['z'] = Math['PI'] / 1.3; waterground[_0x406f('0x25')](ba); return waterground; } function Wagon(_0x493d86) { if (_0x493d86 == 'train') { size = 0xf; color = _0x406f('0x42'); bords_height = 0x4; bords_color = colors[_0x406f('0x2b')]; p = positionWidth * 1.5; } else if (_0x493d86 == 'water') { size = 0xf; color = _0x406f('0x4a'); bords_height = 0x4; bords_color = colors[_0x406f('0x2b')]; p = positionWidth * 0x1; } else if (_0x493d86 == _0x406f('0x28')) { size = 0x2; color = _0x406f('0x41'); bords_height = 0xc; bords_color = _0x406f('0x4b'); p = positionWidth * 1.7; } else { size = 0x2; color = _0x406f('0x41'); bords_height = 0x4; bords_color = colors[_0x406f('0x2b')]; if (_0x493d86 == _0x406f('0x2b')) { p = positionWidth * 0x1; } } wagon = new THREE['Group'](); main = new THREE[(_0x406f('0x35'))](new THREE[(_0x406f('0x36'))]((positionWidth - 0x2) * zoom, p * zoom, size * zoom), new THREE[(_0x406f('0x37'))]({ 'color': colors[color], 'flatShading': ![] })); main[_0x406f('0x24')]['z'] = (0x7 + size / 0x2) * zoom; main['castShadow'] = !![]; main[_0x406f('0x3b')] = !![]; if (_0x493d86 == _0x406f('0x38')) { main['material'][_0x406f('0x4c')] = 0.5; main[_0x406f('0x4d')][_0x406f('0x4e')] = !![]; water = new THREE[(_0x406f('0x35'))](new THREE[(_0x406f('0x36'))]((positionWidth - 0x3) * zoom, (p - 0x3) * zoom, (size - 0x3) * zoom), new THREE[(_0x406f('0x37'))]({ 'color': colors[_0x406f('0x43')], 'flatShading': ![] })); main['add'](water); } let _0x3a925c = [{ 'w': 0x14, 'h': bords_height, 'd': 0x2, 'x': 0x0, 'y': 0x1, 'z': p / 0x2 }, { 'w': 0x14, 'h': bords_height, 'd': 0x2, 'x': 0x0, 'y': 0x1, 'z': -(p / 0x2) }, { 'w': 0x2, 'h': bords_height, 'd': p, 'x': 0x9, 'y': 0x1, 'z': 0x0 }, { 'w': 0x2, 'h': bords_height, 'd': p, 'x': -0x9, 'y': 0x1, 'z': 0x0 }]; for (let _0x14794c of _0x3a925c) { ba = new THREE[(_0x406f('0x35'))](new THREE[(_0x406f('0x36'))](_0x14794c['w'] * zoom, _0x14794c['d'] * zoom, _0x14794c['h'] * zoom), new THREE[(_0x406f('0x37'))]({ 'color': bords_color, 'flatShading': !![] })); ba[_0x406f('0x3e')] = !![]; ba[_0x406f('0x3b')] = !![]; ba[_0x406f('0x24')]['x'] = _0x14794c['x'] * zoom; ba[_0x406f('0x24')]['z'] = (-(size / 0x2) + bords_height / 0x2) * zoom; ba[_0x406f('0x24')]['y'] = _0x14794c['z'] * zoom; main['add'](ba); } let _0x116a3e = { 'w': 0x2, 'h': 0x2, 'd': 0xa, 'x': 0x0, 'y': 0x1, 'z': p / 0x2 + 0x5 }; if (color != _0x406f('0x42')) { attache = new THREE['Mesh'](new THREE[(_0x406f('0x36'))](_0x116a3e['w'] * zoom, _0x116a3e['d'] * zoom, _0x116a3e['h'] * zoom), new THREE[(_0x406f('0x37'))]({ 'color': colors[_0x406f('0x4f')], 'flatShading': !![] })); attache[_0x406f('0x3e')] = !![]; attache[_0x406f('0x3b')] = !![]; attache[_0x406f('0x24')]['x'] = _0x116a3e['x'] * zoom; attache['position']['z'] = (-(size / 0x2) + 0x2) * zoom; attache[_0x406f('0x24')]['y'] = (0x0 + _0x116a3e['z']) * zoom; main[_0x406f('0x25')](attache); } let _0x348139 = [{ 'w': 0x3, 'h': 1.5, 'd': 0x6, 'x': 0xa, 'y': -9.5, 'z': -0x6 }, { 'w': 0x3, 'h': 1.5, 'd': 0x6, 'x': 0xa, 'y': 9.5, 'z': -0x6 }]; for (let _0x1d9a73 of _0x348139) { wheel = new THREE[(_0x406f('0x35'))](new THREE[(_0x406f('0x50'))](_0x1d9a73['w'] * zoom, _0x1d9a73['w'] / 0x3 * zoom, _0x1d9a73['h'] * zoom, _0x1d9a73['d'] * zoom), new THREE[(_0x406f('0x37'))]({ 'color': colors[_0x406f('0x41')], 'flatShading': !![] })); wheel[_0x406f('0x24')]['x'] = _0x1d9a73['x'] * zoom; wheel['position']['y'] = _0x1d9a73['y'] * zoom; wheel[_0x406f('0x24')]['z'] = (-(size / 0x2) - 0x1) * zoom; wheel[_0x406f('0x1f')]['z'] = Math['PI'] / 0x2; main['add'](wheel); } wagon[_0x406f('0x25')](main); return wagon; } function Smoke() { smoke = new THREE[(_0x406f('0x29'))](); main = new THREE[(_0x406f('0x35'))](new THREE[(_0x406f('0x36'))](positionWidth / 0x8 * zoom, positionWidth / 0x8 * zoom, positionWidth / 0x8 * zoom), new THREE['MeshPhongMaterial']({ 'opacity': 0.99, 'transparent': !![], 'color': 0xffffff, 'flatShading': ![] })); main[_0x406f('0x24')]['y'] = 0xa * zoom; main[_0x406f('0x24')]['z'] = 0x1c * zoom; smoke[_0x406f('0x25')](main); return smoke; } function Train() { wagong = new THREE['Group'](); wagon = new Wagon(_0x406f('0x51')); carBackTexture = new Texture(_0x406f('0x52'), 0x28, 0x50, [{ 'x': 0xa, 'y': 0xa, 'w': 0x1e, 'h': 0x3c }]); carLeftSideTexture = new Texture('#000', 0x6e, 0x28, [{ 'x': 0xa, 'y': 0xa, 'w': 0x28, 'h': 0x1e }, { 'x': 0x3c, 'y': 0xa, 'w': 0x28, 'h': 0x1e }]); cabin = new THREE[(_0x406f('0x35'))](new THREE[(_0x406f('0x36'))]((positionWidth - 0x2) * zoom, (positionWidth - 0x4) * zoom, positionWidth / 0x2 * zoom), [new THREE[(_0x406f('0x37'))]({ 'color': 0xcccccc, 'flatShading': !![], 'map': carBackTexture }), new THREE[(_0x406f('0x37'))]({ 'color': 0xcccccc, 'flatShading': !![] }), new THREE[(_0x406f('0x37'))]({ 'color': 0xcccccc, 'flatShading': !![] }), new THREE[(_0x406f('0x37'))]({ 'color': 0xcccccc, 'flatShading': !![], 'map': carLeftSideTexture }), new THREE[(_0x406f('0x37'))]({ 'color': colors[_0x406f('0x42')], 'flatShading': !![] }), new THREE[(_0x406f('0x37'))]({ 'color': 0xcccccc, 'flatShading': !![] })]); cabin[_0x406f('0x24')]['y'] = -((positionWidth - 0x6) / 0x2) * zoom; cabin[_0x406f('0x24')]['z'] = 0x1b * zoom; cabin['castShadow'] = !![]; cabin[_0x406f('0x3b')] = !![]; wagon[_0x406f('0x25')](cabin); noise = new THREE['Mesh'](new THREE[(_0x406f('0x50'))](0x3 * zoom, 0x2 * zoom, 0xb * zoom, 0xb * zoom), new THREE[(_0x406f('0x37'))]({ 'color': colors[_0x406f('0x41')], 'flatShading': !![] })); noise['castShadow'] = !![]; noise[_0x406f('0x3b')] = !![]; noise[_0x406f('0x24')]['y'] = 0xa * zoom; noise[_0x406f('0x24')]['z'] = 0x19 * zoom; noise[_0x406f('0x1f')]['x'] = Math['PI'] / 0x2; wagon[_0x406f('0x25')](noise); wagong[_0x406f('0x25')](wagon); for (let _0x3f84ed = 0x0; _0x3f84ed <= train_countdown / 0x64; _0x3f84ed++) { let _0x15aedb = new TrainCountdown(_0x3f84ed); _0x15aedb[_0x406f('0x2a')] = ![]; wagong[_0x406f('0x25')](_0x15aedb); } return wagong; } function Rails() { three = new THREE[(_0x406f('0x29'))](); createTraverses = () => new THREE['Mesh'](new THREE[(_0x406f('0x36'))](positionWidth * zoom, 0x3 * zoom, 0x2 * zoom), new THREE[(_0x406f('0x37'))]({ 'color': 0x4d2926, 'flatShading': !![] })); createRail = () => new THREE['Mesh'](new THREE['BoxBufferGeometry'](0x2 * zoom, positionWidth * zoom, 0x2 * zoom), new THREE[(_0x406f('0x37'))]({ 'color': colors[_0x406f('0x2b')], 'flatShading': !![] })); for (let _0xdff76f = 0x0; _0xdff76f < 0x3; _0xdff76f++) { middle = createTraverses(); middle[_0x406f('0x3b')] = !![]; middle[_0x406f('0x3e')] = !![]; middle[_0x406f('0x24')]['x'] = 0x1 * zoom; middle[_0x406f('0x24')]['y'] = (0x7 * _0xdff76f - 0x8) * zoom; middle[_0x406f('0x24')]['z'] = 0x1 * zoom; three[_0x406f('0x25')](middle); } rail_left = createRail(); rail_left[_0x406f('0x3b')] = !![]; rail_left[_0x406f('0x3e')] = !![]; rail_left[_0x406f('0x24')]['z'] = 0x2 * zoom; rail_left[_0x406f('0x24')]['x'] = (-(positionWidth / 0x2) + 0x5) * zoom; three[_0x406f('0x25')](rail_left); rail_right = createRail(); rail_right[_0x406f('0x24')]['x'] = (positionWidth / 0x2 - 0x2) * zoom; rail_right[_0x406f('0x3b')] = !![]; rail_right['castShadow'] = !![]; rail_right[_0x406f('0x24')]['z'] = 0x2 * zoom; three[_0x406f('0x25')](rail_right); return three; } function Rock() { rock = new THREE[(_0x406f('0x29'))](); trunk = new THREE[(_0x406f('0x35'))](new THREE[(_0x406f('0x36'))](0x5 * zoom, 0x5 * zoom, 0x5 * zoom), new THREE[(_0x406f('0x37'))]({ 'color': colors[_0x406f('0x47')], 'flatShading': !![] })); trunk['position']['z'] = 2.5 * zoom; trunk[_0x406f('0x3e')] = !![]; trunk[_0x406f('0x3b')] = !![]; trunk2 = new THREE['Mesh'](new THREE[(_0x406f('0x36'))](0x5 * zoom, 0x5 * zoom, 0x5 * zoom), new THREE['MeshPhongMaterial']({ 'color': colors[_0x406f('0x47')], 'flatShading': !![] })); trunk2['position']['z'] = 2.5 * zoom; trunk2[_0x406f('0x3e')] = !![]; trunk2[_0x406f('0x3b')] = !![]; rock[_0x406f('0x25')](trunk); rock[_0x406f('0x25')](trunk2); height = (positionWidth / 0x2 + Math[_0x406f('0x53')](Math[_0x406f('0x54')]() * 0x14)) / 0x3 * zoom; this[_0x406f('0x55')] = height; main = new THREE[(_0x406f('0x35'))](new THREE['BoxBufferGeometry'](positionWidth * zoom, positionWidth * zoom, height * zoom), new THREE[(_0x406f('0x37'))]({ 'color': colors[_0x406f('0x56')], 'flatShading': !![] })); main[_0x406f('0x24')]['x'] = 0x0 * zoom; main[_0x406f('0x24')]['y'] = 0x0 * zoom; main[_0x406f('0x24')]['z'] = height / 0x2 * zoom; main[_0x406f('0x3e')] = !![]; main[_0x406f('0x3b')] = !![]; rock[_0x406f('0x25')](main); return rock; } function Metal() { rock = new THREE[(_0x406f('0x29'))](); trunk = new THREE['Mesh'](new THREE[(_0x406f('0x36'))](0x5 * zoom, 0x5 * zoom, 0x5 * zoom), new THREE['MeshPhongMaterial']({ 'color': 0x4d2926, 'flatShading': !![] })); trunk['position']['z'] = 2.5 * zoom; trunk['castShadow'] = !![]; trunk[_0x406f('0x3b')] = !![]; trunk2 = new THREE['Mesh'](new THREE['BoxBufferGeometry'](0x5 * zoom, 0x5 * zoom, 0x5 * zoom), new THREE[(_0x406f('0x37'))]({ 'color': 0x4d2926, 'flatShading': !![] })); trunk2[_0x406f('0x24')]['z'] = 2.5 * zoom; trunk2[_0x406f('0x3e')] = !![]; trunk2[_0x406f('0x3b')] = !![]; rock[_0x406f('0x25')](trunk); rock[_0x406f('0x25')](trunk2); height = (positionWidth / 0x2 + Math['floor'](Math['random']() * 0x14)) / 0x2 * zoom; this[_0x406f('0x55')] = height; main = new THREE[(_0x406f('0x35'))](new THREE[(_0x406f('0x36'))](positionWidth * zoom, positionWidth * zoom, height * zoom), new THREE['MeshPhongMaterial']({ 'color': colors[_0x406f('0x47')], 'flatShading': !![] })); main[_0x406f('0x24')]['x'] = 0x0 * zoom; main[_0x406f('0x24')]['y'] = 0x0 * zoom; main[_0x406f('0x24')]['z'] = height / 0x2 * zoom; main[_0x406f('0x3e')] = !![]; main[_0x406f('0x3b')] = !![]; rock[_0x406f('0x25')](main); return rock; } function Arbre() { arbre = new THREE[(_0x406f('0x29'))](); trunk = new THREE[(_0x406f('0x35'))](new THREE[(_0x406f('0x36'))](0x5 * zoom, 0x5 * zoom, 0x5 * zoom), new THREE[(_0x406f('0x37'))]({ 'color': colors['bois'], 'flatShading': !![] })); trunk[_0x406f('0x24')]['z'] = 2.5 * zoom; trunk[_0x406f('0x3e')] = !![]; trunk['receiveShadow'] = !![]; trunk2 = new THREE[(_0x406f('0x35'))](new THREE['BoxBufferGeometry'](0x5 * zoom, 0x5 * zoom, 0x5 * zoom), new THREE[(_0x406f('0x37'))]({ 'color': colors[_0x406f('0x3a')], 'flatShading': !![] })); trunk2[_0x406f('0x24')]['z'] = 2.5 * zoom; trunk2[_0x406f('0x3e')] = !![]; trunk2[_0x406f('0x3b')] = !![]; arbre[_0x406f('0x25')](trunk); arbre['add'](trunk2); body = new THREE[(_0x406f('0x29'))](); let _0x2949b8 = Math[_0x406f('0x53')](Math[_0x406f('0x54')]() * 0xb4) + 0x1; body[_0x406f('0x1f')]['z'] = _0x2949b8 * Math['PI'] / 0xb4; cube1 = new THREE[(_0x406f('0x35'))](new THREE[(_0x406f('0x36'))](0x9 * zoom, 0x9 * zoom, 0x9 * zoom), new THREE[(_0x406f('0x3c'))]({ 'color': 0x9cff00, 'flatShading': !![] })); cube1[_0x406f('0x24')]['z'] = 0xc * zoom; cube1[_0x406f('0x24')]['x'] = 0x3 * zoom; cube1[_0x406f('0x24')]['y'] = -0x3 * zoom; cube1[_0x406f('0x3e')] = !![]; cube1[_0x406f('0x3b')] = ![]; body[_0x406f('0x25')](cube1); cube2 = new THREE['Mesh'](new THREE[(_0x406f('0x36'))](0xb * zoom, 0xb * zoom, 0xb * zoom), new THREE[(_0x406f('0x3c'))]({ 'color': 0x9cff00, 'flatShading': !![] })); cube2['position']['z'] = 0xe * zoom; cube2['position']['x'] = -0x3 * zoom; cube2[_0x406f('0x24')]['y'] = 0x3 * zoom; cube2[_0x406f('0x3e')] = !![]; cube2[_0x406f('0x3b')] = ![]; body[_0x406f('0x25')](cube2); arbre['add'](body); return arbre; } function Sapin() { arbre = new THREE[(_0x406f('0x29'))](); trunk = new THREE[(_0x406f('0x35'))](new THREE[(_0x406f('0x36'))](0x5 * zoom, 0x5 * zoom, 0x5 * zoom), new THREE['MeshPhongMaterial']({ 'color': colors[_0x406f('0x3a')], 'flatShading': !![] })); trunk[_0x406f('0x24')]['z'] = 2.5 * zoom; trunk['castShadow'] = !![]; trunk[_0x406f('0x3b')] = !![]; trunk2 = new THREE[(_0x406f('0x35'))](new THREE[(_0x406f('0x36'))](0x5 * zoom, 0x5 * zoom, 0x5 * zoom), new THREE['MeshPhongMaterial']({ 'color': colors[_0x406f('0x3a')], 'flatShading': !![] })); trunk2['position']['z'] = 2.5 * zoom; trunk2[_0x406f('0x3e')] = !![]; trunk2[_0x406f('0x3b')] = !![]; arbre[_0x406f('0x25')](trunk); arbre[_0x406f('0x25')](trunk2); body = new THREE[(_0x406f('0x29'))](); let _0x413c8b = Math['floor'](Math[_0x406f('0x54')]() * 0xb4) + 0x1; body[_0x406f('0x1f')]['z'] = _0x413c8b * Math['PI'] / 0xb4; cube1 = new THREE[(_0x406f('0x35'))](new THREE[(_0x406f('0x36'))](0x6 * zoom, 0x6 * zoom, 0x6 * zoom), new THREE[(_0x406f('0x3c'))]({ 'color': 0x45be6f, 'flatShading': !![] })); cube1[_0x406f('0x24')]['z'] = 0x10 * zoom; cube1[_0x406f('0x3e')] = !![]; cube1[_0x406f('0x3b')] = ![]; body['add'](cube1); cube2 = new THREE[(_0x406f('0x35'))](new THREE[(_0x406f('0x36'))](0xb * zoom, 0xb * zoom, 0x6 * zoom), new THREE['MeshLambertMaterial']({ 'color': 0x45be6f, 'flatShading': !![] })); cube2[_0x406f('0x24')]['z'] = 0xa * zoom; cube2['castShadow'] = !![]; cube2[_0x406f('0x3b')] = ![]; body[_0x406f('0x25')](cube2); arbre['add'](body); return arbre; } function Station() { station = new THREE[(_0x406f('0x29'))](); stationBackTexture = new Texture(_0x406f('0x52'), positionWidth * zoom * 0x2, positionWidth * zoom * 0x6, [{ 'x': 0x1e, 'y': 0xa, 'w': 0x3c, 'h': 0x3c }, { 'x': 0x14, 'y': 0x50, 'w': 0x3c, 'h': 0x50 }, { 'x': 0x1e, 'y': 0xaa, 'w': 0x3c, 'h': 0x3c }]); center = new THREE[(_0x406f('0x35'))](new THREE['BoxBufferGeometry'](positionWidth * zoom, positionWidth * 0x3 * zoom, positionWidth * 1.5 * zoom), [new THREE['MeshPhongMaterial']({ 'color': 0x705341, 'flatShading': !![], 'map': stationBackTexture }), new THREE[(_0x406f('0x37'))]({ 'color': 0x705341, 'flatShading': !![] }), new THREE[(_0x406f('0x37'))]({ 'color': 0x705341, 'flatShading': !![] }), new THREE['MeshPhongMaterial']({ 'color': 0x705341, 'flatShading': !![] }), new THREE[(_0x406f('0x37'))]({ 'color': 0x705341, 'flatShading': !![] }), new THREE[(_0x406f('0x37'))]({ 'color': 0x705341, 'flatShading': !![] })]); center['position']['z'] = positionWidth * 1.5 / 0x2 * zoom; center[_0x406f('0x3e')] = !![]; center[_0x406f('0x3b')] = !![]; plafond = new THREE['Mesh'](new THREE[(_0x406f('0x36'))]((positionWidth - 0x4) * zoom, (positionWidth * 0x3 - 0x4) * zoom, 0x4 * zoom), new THREE[(_0x406f('0x37'))]({ 'color': 0x5acaa4, 'flatShading': !![] })); plafond[_0x406f('0x24')]['z'] = (positionWidth * 1.5 + 0x2) * zoom; plafond[_0x406f('0x3e')] = !![]; plafond[_0x406f('0x3b')] = !![]; grenier = new THREE[(_0x406f('0x35'))](new THREE[(_0x406f('0x36'))]((positionWidth - 0x4) * zoom, positionWidth * zoom, positionWidth * zoom), new THREE[(_0x406f('0x37'))]({ 'color': 0x705341, 'flatShading': !![] })); grenier[_0x406f('0x24')]['z'] = (positionWidth * 0x2 + 0x4) * zoom; grenier[_0x406f('0x3e')] = !![]; grenier[_0x406f('0x3b')] = !![]; gplafond = new THREE[(_0x406f('0x35'))](new THREE[(_0x406f('0x36'))]((positionWidth - 0x4) * zoom, (positionWidth - 0x4) * zoom, 0x4 * zoom), new THREE['MeshPhongMaterial']({ 'color': 0x5acaa4, 'flatShading': !![] })); gplafond['position']['z'] = (positionWidth * 0x3 - 0x4) * zoom; gplafond[_0x406f('0x3e')] = !![]; gplafond[_0x406f('0x3b')] = !![]; station[_0x406f('0x25')](center); station[_0x406f('0x25')](plafond); station[_0x406f('0x25')](grenier); station[_0x406f('0x25')](gplafond); return station; } function Cell(_0x9fd4f1) { let _0x52476a = 0x0; this['name'] = _0x406f('0x57') + _0x9fd4f1; let _0x2dcfb2 = _0x9fd4f1[0x0]; let _0x145528 = _0x9fd4f1[0x1] && _0x9fd4f1[0x1] != '\x20' ? _0x9fd4f1[0x1] : null; let _0x102d98 = _0x9fd4f1[0x2] && _0x9fd4f1[0x2] != '\x20' ? _0x9fd4f1[0x2] : null; let _0x50a5db = 0xf; if (_0x2dcfb2 == 'g') _0x52476a = 0x84ed47; if (_0x2dcfb2 == 'h') _0x52476a = 0xfff14b; if (_0x2dcfb2 == 'o') _0x52476a = 0xff5b3c; if (_0x2dcfb2 == 'b') _0x52476a = 0xaa5252; if (_0x2dcfb2 == 'r') _0x52476a = colors[_0x406f('0x56')]; if (_0x2dcfb2 == 'm') _0x52476a = colors['metal']; if (_0x2dcfb2 == 'w' || _0x2dcfb2 == 'x') _0x52476a = 0xffe0; cellg = new THREE[(_0x406f('0x29'))](); cell = new THREE[(_0x406f('0x35'))](new THREE['BoxBufferGeometry'](positionWidth * zoom, positionWidth * zoom, _0x50a5db * zoom), new THREE['MeshPhongMaterial']({ 'color': _0x52476a })); cell[_0x406f('0x3e')] = !![]; cell[_0x406f('0x3b')] = !![]; cell[_0x406f('0x24')]['x'] = 0x0; let _0x16ea46 = 0xf; if (_0x2dcfb2 == 'w' || _0x2dcfb2 == 'x') _0x16ea46 = 0x14; cell['position']['z'] = (_0x50a5db / 0x2 - _0x16ea46) * zoom; cellg[_0x406f('0x25')](cell); if (_0x2dcfb2 == 'x') { this['addon'] = new WaterGround(); cellg[_0x406f('0x25')](this[_0x406f('0x58')]); } if (_0x145528 != null) { if (_0x145528 == 't') { if (_0x2dcfb2 == 'g') this[_0x406f('0x58')] = new Arbre(); if (_0x2dcfb2 == 'o') this[_0x406f('0x58')] = new Arbre(); if (_0x2dcfb2 == 'b') this[_0x406f('0x58')] = new Sapin(); cellg[_0x406f('0x25')](this[_0x406f('0x58')]); } if (_0x145528 == 'l') { this[_0x406f('0x58')] = new Rails(); cellg[_0x406f('0x25')](this[_0x406f('0x58')]); } if (_0x145528 == 'r') { this['addon'] = new Rock(); cellg[_0x406f('0x25')](this['addon']); } if (_0x145528 == 'm') { this[_0x406f('0x58')] = new Metal(); cellg['add'](this['addon']); } if (_0x145528 == 'b' || _0x145528 == 'p') { nb = 0x1; if (_0x102d98) nb = _0x102d98; for (let _0x182419 = 0x0; _0x182419 < nb; _0x182419++) { let _0x4134d0 = _0x145528 == 'b' ? _0x406f('0x3a') : 'metal'; let _0x18be87 = new Stock(_0x4134d0); _0x18be87['position']['z'] = _0x182419 * 0x3 - 0x2; _0x18be87[_0x406f('0x24')]['y'] = -0x19; if (_0x182419 % 0x2 !== 0x0) { _0x18be87[_0x406f('0x1f')]['z'] = Math['PI']; _0x18be87[_0x406f('0x24')]['x'] = positionWidth; _0x18be87[_0x406f('0x24')]['y'] = -0x4; } cellg['add'](_0x18be87); } } if (_0x145528 == 'w') { this[_0x406f('0x58')] = new WaterBucket(); cellg[_0x406f('0x25')](this[_0x406f('0x58')]); } if (_0x145528 == 'h') { this[_0x406f('0x58')] = new Hache(); cellg[_0x406f('0x25')](this['addon']); } if (_0x145528 == 'a') { this[_0x406f('0x58')] = new Axe(); cellg[_0x406f('0x25')](this[_0x406f('0x58')]); } if (_0x145528 == 's') { this[_0x406f('0x58')] = new Station(); cellg['add'](this[_0x406f('0x58')]); } } return cellg; } function TrainCountdown(_0x141573 = 0x5) { let _0x33234b = new THREE[(_0x406f('0x29'))](); var _0x2045b3 = new THREE[(_0x406f('0x59'))](); _0x2045b3[_0x406f('0x5a')](_0x406f('0x5b'), function (_0x1777a9) { var _0x4ab19a = new THREE[(_0x406f('0x5c'))](_0x141573['toString'](), { 'font': _0x1777a9, 'size': 0x14, 'height': 0x1, 'curveSegments': 0xc, 'bevelThickness': 0x1, 'bevelSize': 0x1, 'bevelEnabled': !![] }); var _0x2216f1 = new THREE[(_0x406f('0x37'))]({ 'color': 0xffffff, 'specular': 0xffffff }); var _0x8289d0 = new THREE[(_0x406f('0x35'))](_0x4ab19a, _0x2216f1); _0x8289d0[_0x406f('0x24')]['x'] = 0x0 * zoom; _0x8289d0[_0x406f('0x24')]['z'] = positionWidth * 1.8 * zoom; _0x8289d0[_0x406f('0x24')]['y'] = -(positionWidth / 0x2) * zoom; _0x8289d0[_0x406f('0x1f')]['z'] = 0x5a * Math['PI'] / 0xb4; _0x8289d0[_0x406f('0x1f')]['y'] = 0x5a * Math['PI'] / 0xb4; _0x33234b[_0x406f('0x25')](_0x8289d0); return _0x33234b; }); return _0x33234b; } function Distance(_0x326eae) { let _0x2296c1 = new THREE[(_0x406f('0x29'))](); var _0x4709cb = new THREE[(_0x406f('0x59'))](); _0x4709cb[_0x406f('0x5a')]('helvetiker_regular.typeface.json', function (_0x42b828) { var _0x1946d6 = new THREE[(_0x406f('0x5c'))](_0x326eae + '\x20m', { 'font': _0x42b828, 'size': 0x14, 'height': 0x1, 'curveSegments': 0xc, 'bevelThickness': 0x1, 'bevelSize': 0x1, 'bevelEnabled': !![] }); var _0x442476 = new THREE['MeshPhongMaterial']({ 'color': 0xffffff, 'specular': 0xffffff }); if (_0x326eae == 0x0) { _0x442476 = new THREE[(_0x406f('0x37'))]({ 'color': 0xe0e0e0, 'specular': 0xe0e0e0 }); } var _0x2ab93f = new THREE[(_0x406f('0x35'))](_0x1946d6, _0x442476); _0x2ab93f[_0x406f('0x24')]['x'] = columns * positionWidth * zoom; _0x2ab93f['position']['z'] = -0x19 * zoom; _0x2ab93f['position']['y'] = 0x0; _0x2ab93f[_0x406f('0x1f')]['z'] = 0x5a * Math['PI'] / 0xb4; _0x2ab93f[_0x406f('0x1f')]['y'] = 0x5a * Math['PI'] / 0xb4; _0x2296c1[_0x406f('0x25')](_0x2ab93f); return _0x2296c1; }); return _0x2296c1; } function Lane(_0x4b8d5c) { this[_0x406f('0x27')] = _0x4b8d5c; cells = []; this[_0x406f('0x23')] = new THREE['Group'](); this[_0x406f('0x5d')] = _0x406f('0x5e') + _0x4b8d5c; for (let _0x2b1aa2 = 0x0; _0x2b1aa2 < levels[level_id][_0x406f('0x2c')]; _0x2b1aa2++) { if (levels[level_id][_0x2b1aa2][_0x4b8d5c] && levels[level_id][_0x2b1aa2][_0x4b8d5c][0x0] != 'e') { cells[_0x2b1aa2] = new Cell(levels[level_id][_0x2b1aa2][_0x4b8d5c]); cells[_0x2b1aa2][_0x406f('0x24')]['x'] = positionWidth * _0x2b1aa2 * zoom; this[_0x406f('0x23')][_0x406f('0x25')](cells[_0x2b1aa2]); } else { this[_0x406f('0x23')][_0x406f('0x25')](new THREE[(_0x406f('0x29'))]()); } } if ((_0x4b8d5c - 0x8) % 0xa == 0x0) { this['mesh'][_0x406f('0x25')](new Distance(_0x4b8d5c - 0x8)); } this[_0x406f('0x5f')] = cells; } function initaliseValues() { water_bucket_position = [0xb, 0x2]; hache_position = [0xb, 0x3]; axe_position = [0xb, 0x4]; train_position = [0x9, 0x9]; train_length = 0x7; train_counter = 0x0; train_countdown = 0x3e8; currentLane = 0x7; currentColumn = 0xc; currentLane = 0x3; currentColumn = 0x8; level_id = 0x0; stock = { 'rails': 0x0, 'pierre': 0x0, 'bois': 0x0 }; level_distance = levels[level_id][0x0][_0x406f('0x2c')]; player_pick = []; previousTimestamp = null; startMoving = ![]; moves = []; directions = []; moves_players = []; player = new Player(currentLane, currentColumn); player[_0x406f('0x24')]['x'] = currentColumn * positionWidth * zoom; player[_0x406f('0x24')]['y'] = currentLane * positionWidth * zoom; scene[_0x406f('0x25')](player); camera[_0x406f('0x24')]['y'] = initialCameraPositionY; camera[_0x406f('0x24')]['x'] = initialCameraPositionX; dirLight[_0x406f('0x24')]['x'] = initialDirLightPositionX; dirLight[_0x406f('0x24')]['y'] = initialDirLightPositionY; lanes = generateLanes(); train = generateTrain(); wwater = generateWagonWater(); wstock = generateWagonStock(); wrails = generateWagonRails(); train_smoke = new Smoke(); wwater_smoke = new Smoke(); train_smoke_default = new Smoke(); train[_0x406f('0x25')](train_smoke); scene[_0x406f('0x25')](train); wwater_smoke[_0x406f('0x24')]['y'] = -0x14; wwater_smoke[_0x406f('0x2a')] = ![]; wwater[_0x406f('0x25')](wwater_smoke); scene[_0x406f('0x25')](wwater); scene[_0x406f('0x25')](wstock); scene[_0x406f('0x25')](wrails); menu[_0x406f('0x60')][_0x406f('0x61')] = 'none'; start(); }; renderer = new THREE[(_0x406f('0x62'))]({ 'alpha': !![], 'antialias': !![] }); function createStats() { var _0x1bc50b = new Stats(); _0x1bc50b['setMode'](0x0); _0x1bc50b[_0x406f('0x63')][_0x406f('0x60')][_0x406f('0x24')] = _0x406f('0x64'); _0x1bc50b[_0x406f('0x63')][_0x406f('0x60')][_0x406f('0x65')] = '0'; _0x1bc50b['domElement'][_0x406f('0x60')]['top'] = '0'; return _0x1bc50b; } String[_0x406f('0x66')][_0x406f('0x67')] = function (_0x35d392, _0x4ec846) { return this['substr'](0x0, _0x35d392) + _0x4ec846 + this[_0x406f('0x68')](_0x35d392 + _0x4ec846['length']); }; renderer[_0x406f('0x69')][_0x406f('0x6a')] = !![]; renderer[_0x406f('0x69')]['type'] = THREE['PCFSoftShadowMap']; renderer[_0x406f('0x6b')](window[_0x406f('0x1d')], window[_0x406f('0x1e')]); document[_0x406f('0x6c')][_0x406f('0x6d')](renderer['domElement']); document[_0x406f('0x6e')]('DOMContentLoaded', function () { var _0x3aaae0 = _0x406f('0x6f'); document[_0x406f('0x6c')][_0x406f('0x60')][_0x406f('0x70')] = window['innerWidth'] / window[_0x406f('0x71')]; document[_0x406f('0x6c')][_0x406f('0x60')][_0x406f('0x72')] = _0x3aaae0; document[_0x406f('0x6c')]['style'][_0x406f('0x73')] = _0x3aaae0; document[_0x406f('0x6c')]['style'][_0x406f('0x74')] = _0x3aaae0; }); document[_0x406f('0x75')](_0x406f('0x76'))[_0x406f('0x6e')](_0x406f('0x77'), () => { lanes['forEach'](_0x55cc9d => scene[_0x406f('0x78')](_0x55cc9d[_0x406f('0x23')])); initaliseValues(); endDOM['style'][_0x406f('0x79')] = _0x406f('0x7a'); }); document['addEventListener']('mousewheel', _0x36c6e4 => { console[_0x406f('0x7b')](_0x406f('0x7c'), _0x36c6e4); if (_0x36c6e4[_0x406f('0x7d')] > 0x0) camera['zoom'] -= 0.01; else camera[_0x406f('0x70')] += 0.01; camera[_0x406f('0x7e')](); }, ![]); document[_0x406f('0x18')](_0x406f('0x7f'))[_0x406f('0x6e')]('click', () => move(_0x406f('0x65'))); document[_0x406f('0x18')](_0x406f('0x80'))['addEventListener']('click', () => move(_0x406f('0x81'))); document['getElementById']('left')[_0x406f('0x6e')](_0x406f('0x77'), () => move('backward')); document[_0x406f('0x18')](_0x406f('0x81'))[_0x406f('0x6e')](_0x406f('0x77'), () => move(_0x406f('0x7f'))); window['addEventListener']('keydown', _0x4ea87f => { if (_0x4ea87f[_0x406f('0x82')] == '32') { pick(); } else if (_0x4ea87f[_0x406f('0x82')] == '38') { move(_0x406f('0x65')); } else if (_0x4ea87f[_0x406f('0x82')] == '40') { move(_0x406f('0x81')); } else if (_0x4ea87f[_0x406f('0x82')] == '37') { move(_0x406f('0x80')); } else if (_0x4ea87f[_0x406f('0x82')] == '39') { move(_0x406f('0x7f')); } }); function pick() { console[_0x406f('0x7b')]('pick', levels[level_id][currentColumn][currentLane]); if (!started) return; pick_item = levels[level_id][currentColumn][currentLane][0x1]; pick_item_nb = parseInt(levels[level_id][currentColumn][currentLane][0x2]); if (!(pick_item_nb >= 0x0)) pick_item_nb = '\x20'; type_color = pick_item == 'b' ? colors['bois'] : colors[_0x406f('0x47')]; cell = getCell(); drop_cell = levels[level_id][cell['column']] && levels[level_id][cell[_0x406f('0x83')]] ? levels[level_id][cell[_0x406f('0x83')]][cell[_0x406f('0x84')]] : null; update_player = ![]; console['log']('cell', cell); console[_0x406f('0x7b')](_0x406f('0x85'), player_pick); console[_0x406f('0x7b')](_0x406f('0x86'), direction); console['log'](_0x406f('0x87'), levels[level_id][currentColumn]); console[_0x406f('0x7b')](_0x406f('0x88'), levels[level_id][currentColumn][currentLane]); console[_0x406f('0x7b')](_0x406f('0x89'), pick_item); console[_0x406f('0x7b')](_0x406f('0x8a'), pick_item_nb); console[_0x406f('0x7b')](_0x406f('0x8b'), drop_cell); need_to_drop = []; picked = ![]; if (pick_item == 'h' || pick_item == 'a' || pick_item == 'w') { console[_0x406f('0x7b')](_0x406f('0x8c')); need_to_drop = player_pick; lanes[currentLane]['mesh'][_0x406f('0x44')][currentColumn][_0x406f('0x44')][_0x406f('0x8d')](); levels[level_id][currentColumn][currentLane] = levels[level_id][currentColumn][currentLane][_0x406f('0x67')](0x1, '\x20'); player_pick = [pick_item]; update_player = !![]; } else if (pick_item == 'b' || pick_item == 'p') { console[_0x406f('0x7b')](_0x406f('0x8e')); if (player_pick['length'] >= 0x3) { console['warn'](_0x406f('0x8f')); picked = ![]; need_to_drop = player_pick; } else { console[_0x406f('0x90')]('picked\x20true'); picked = !![]; need_to_drop = player_pick; if (pick_item_nb <= 0x3) { levels[level_id][currentColumn][currentLane] = levels[level_id][currentColumn][currentLane][_0x406f('0x67')](0x1, '\x20'); levels[level_id][currentColumn][currentLane] = levels[level_id][currentColumn][currentLane][_0x406f('0x67')](0x2, '\x20'); } else levels[level_id][currentColumn][currentLane] = levels[level_id][currentColumn][currentLane][_0x406f('0x67')](0x2, (pick_item_nb - 0x3)[_0x406f('0x91')]()); for (let _0x1a4489 = 0x0; _0x1a4489 <= pick_item_nb && _0x1a4489 < 0x3; _0x1a4489++) { player_pick[_0x406f('0x16')](pick_item); lanes[currentLane][_0x406f('0x23')][_0x406f('0x44')][currentColumn][_0x406f('0x44')]['pop'](); } } update_player = !![]; } console[_0x406f('0x7b')](_0x406f('0x92'), need_to_drop); console[_0x406f('0x7b')](_0x406f('0x93'), levels[level_id][currentColumn][currentLane]); console[_0x406f('0x7b')](_0x406f('0x8b'), drop_cell); console[_0x406f('0x7b')](_0x406f('0x94'), player_pick); if (drop_cell != null && drop_cell[0x0] == 'w' && player_pick['length'] > 0x0 && player_pick[0x0] == 'b') { console[_0x406f('0x7b')](_0x406f('0x95')); levels[level_id][cell[_0x406f('0x83')]][cell['lane']] = levels[level_id][cell['column']][cell[_0x406f('0x84')]][_0x406f('0x67')](0x0, 'x'); let _0x978fdf = new WaterGround(); lanes[cell[_0x406f('0x84')]][_0x406f('0x23')]['children'][cell[_0x406f('0x83')]][_0x406f('0x25')](_0x978fdf); player_pick[_0x406f('0x96')](); update_player = !![]; } else if (drop_cell != null && drop_cell[0x2] == 's' && player_pick[_0x406f('0x2c')] > 0x0) { console['log'](_0x406f('0x97')); if (player_pick[0x0] == 'b') { index = 0x1; start_at = counter['b']; can_drop = 0x6 - start_at; } if (player_pick[0x0] == 'p') { index = 0x2; start_at = counter['p']; can_drop = 0x6 - start_at; } if (can_drop > 0x3) can_drop = player_pick[_0x406f('0x2c')]; if (can_drop <= 0x0) can_drop = 0x6 - start_at; if (can_drop > 0x0) { type_color = player_pick[0x0] == 'b' ? colors[_0x406f('0x3a')] : colors[_0x406f('0x47')]; if (can_drop > player_pick[_0x406f('0x2c')]) can_drop = player_pick['length']; for (let _0x3d1e36 = start_at; _0x3d1e36 < can_drop + start_at; _0x3d1e36++) { wstock[_0x406f('0x44')][index][_0x406f('0x44')][_0x3d1e36][_0x406f('0x2a')] = !![]; counter[player_pick[0x0]]++; player_pick['shift'](); } update_player = !![]; updateCounter(); } update_player = !![]; console[_0x406f('0x7b')](_0x406f('0x98'), JSON[_0x406f('0x99')](JSON[_0x406f('0x9a')](counter))); } else if (drop_cell != null && drop_cell[0x2] == 'r' && player_pick[_0x406f('0x2c')] == 0x0 && stock[_0x406f('0x9b')] > 0x0) { console[_0x406f('0x7b')]('drop\x20==\x20wagon\x20rails'); player_pick = ['r', 'r', 'r']; update_player = !![]; } else if (drop_cell != null && (pick_item == '\x20' && player_pick['length'] > 0x0 && player_pick[0x0] == 'w' || need_to_drop[0x0] == 'w')) { console[_0x406f('0x7b')](_0x406f('0x9c')); lanes[currentLane][_0x406f('0x23')][_0x406f('0x44')][currentColumn][_0x406f('0x25')](new WaterBucket()); levels[level_id][currentColumn][currentLane] = levels[level_id][currentColumn][currentLane][_0x406f('0x67')](0x1, 'w'); update_player = !![]; if (need_to_drop[0x0] != 'w') player_pick = []; } else if (drop_cell != null && (pick_item == '\x20' && player_pick['length'] > 0x0 && player_pick[0x0] == 'h' || need_to_drop[0x0] == 'h')) { console[_0x406f('0x7b')](_0x406f('0x9d')); lanes[currentLane][_0x406f('0x23')][_0x406f('0x44')][currentColumn][_0x406f('0x25')](new Hache()); levels[level_id][currentColumn][currentLane] = levels[level_id][currentColumn][currentLane][_0x406f('0x67')](0x1, 'h'); update_player = !![]; if (need_to_drop[0x0] != 'h') player_pick = []; } else if (drop_cell != null && (pick_item == '\x20' && player_pick[_0x406f('0x2c')] > 0x0 && player_pick[0x0] == 'a' || need_to_drop[0x0] == 'a')) { console[_0x406f('0x7b')](_0x406f('0x9e')); lanes[currentLane][_0x406f('0x23')][_0x406f('0x44')][currentColumn][_0x406f('0x25')](new Axe()); levels[level_id][currentColumn][currentLane] = levels[level_id][currentColumn][currentLane]['replaceAt'](0x1, 'a'); update_player = !![]; if (need_to_drop[0x0] != 'a') player_pick = []; } else if (!picked && drop_cell != null && drop_cell[0x1] == '\x20' && player_pick[_0x406f('0x2c')] > 0x0 && (player_pick[0x0] == 'b' || player_pick[0x0] == 'p')) { console[_0x406f('0x7b')](_0x406f('0x9f'), player_pick); if (player_pick[_0x406f('0x2c')] > 0x0 && player_pick[0x0] != levels[level_id][currentColumn][currentLane][0x1] && levels[level_id][currentColumn][currentLane][0x1] != '\x20') { console[_0x406f('0x90')](_0x406f('0xa0')); type_color = player_pick[0x0] == 'b' ? colors[_0x406f('0x3a')] : colors[_0x406f('0x47')]; } else { levels[level_id][currentColumn][currentLane] = levels[level_id][currentColumn][currentLane][_0x406f('0x67')](0x1, player_pick[0x0]); start_at = pick_item_nb > 0x0 ? pick_item_nb : 0x0; if (player_pick[_0x406f('0x2c')] > 0x1) levels[level_id][currentColumn][currentLane] = levels[level_id][currentColumn][currentLane][_0x406f('0x67')](0x2, (start_at + player_pick[_0x406f('0x2c')])[_0x406f('0x91')]()); for (let _0x577a87 = start_at; _0x577a87 < player_pick[_0x406f('0x2c')] + start_at; _0x577a87++) { if (player_pick[0x0] == 'b') sb = new Stock('bois'); else sb = new Stock(_0x406f('0x47')); sb[_0x406f('0x24')]['y'] = -0x19; sb[_0x406f('0x24')]['z'] = _0x577a87 * 0x3 - 0x2; if (_0x577a87 % 0x2 !== 0x0) { sb[_0x406f('0x1f')]['z'] = Math['PI']; sb[_0x406f('0x24')]['x'] = positionWidth; sb[_0x406f('0x24')]['y'] = -0x4; } lanes[currentLane][_0x406f('0x23')][_0x406f('0x44')][currentColumn][_0x406f('0x25')](sb); } update_player = !![]; if (need_to_drop[0x0] != 'b' || need_to_drop[0x0] != 'p') player_pick = []; } } if (update_player == !![]) { console[_0x406f('0x7b')](_0x406f('0xa1'), update_player); console[_0x406f('0x7b')](_0x406f('0x94'), player_pick); console[_0x406f('0x7b')]('type_color', type_color); if (player_pick[_0x406f('0x2c')] > 0x0) { if (player_pick[0x0] == 'b' || player_pick[0x0] == 'p') { if (player_pick[_0x406f('0x2c')] >= 0x1) { player[_0x406f('0x44')][0x2][_0x406f('0x44')][0x2][_0x406f('0x2a')] = !![]; player[_0x406f('0x44')][0x2][_0x406f('0x44')][0x3][_0x406f('0x2a')] = !![]; player[_0x406f('0x44')][0x2][_0x406f('0x44')][0x2]['material'][_0x406f('0xa2')][_0x406f('0xa3')](type_color); player[_0x406f('0x44')][0x2]['children'][0x3][_0x406f('0x4d')][_0x406f('0xa2')][_0x406f('0xa3')](type_color); player[_0x406f('0x44')][0x2][_0x406f('0x44')][0x4][_0x406f('0x2a')] = ![]; player[_0x406f('0x44')][0x2][_0x406f('0x44')][0x5][_0x406f('0x2a')] = ![]; } if (player_pick['length'] >= 0x2) { player[_0x406f('0x44')][0x2][_0x406f('0x44')][0x4][_0x406f('0x2a')] = !![]; player[_0x406f('0x44')][0x2][_0x406f('0x44')][0x5]['visible'] = !![]; player['children'][0x2][_0x406f('0x44')][0x4]['material'][_0x406f('0xa2')][_0x406f('0xa3')](type_color); player['children'][0x2][_0x406f('0x44')][0x5]['material']['color']['setHex'](type_color); player[_0x406f('0x44')][0x2][_0x406f('0x44')][0x6][_0x406f('0x2a')] = ![]; player['children'][0x2][_0x406f('0x44')][0x7][_0x406f('0x2a')] = ![]; } if (player_pick['length'] >= 0x3) { player[_0x406f('0x44')][0x2][_0x406f('0x44')][0x6][_0x406f('0x2a')] = !![]; player[_0x406f('0x44')][0x2][_0x406f('0x44')][0x7][_0x406f('0x2a')] = !![]; player[_0x406f('0x44')][0x2][_0x406f('0x44')][0x6][_0x406f('0x4d')][_0x406f('0xa2')][_0x406f('0xa3')](type_color); player[_0x406f('0x44')][0x2][_0x406f('0x44')][0x7]['material'][_0x406f('0xa2')][_0x406f('0xa3')](type_color); } } else if (player_pick[0x0] == 'r') { player[_0x406f('0x44')][0x2][_0x406f('0x44')][0x8][_0x406f('0x2a')] = !![]; player['children'][0x2][_0x406f('0x44')][0x9][_0x406f('0x2a')] = !![]; player[_0x406f('0x44')][0x2][_0x406f('0x44')][0xa][_0x406f('0x2a')] = !![]; } else if (player_pick[0x0] == 'w') { player[_0x406f('0x44')][0x2][_0x406f('0x44')][0xb][_0x406f('0x2a')] = !![]; player[_0x406f('0x44')][0x2]['children'][0xc][_0x406f('0x2a')] = ![]; player[_0x406f('0x44')][0x2]['children'][0xd][_0x406f('0x2a')] = ![]; } else if (player_pick[0x0] == 'h') { player[_0x406f('0x44')][0x2][_0x406f('0x44')][0xb]['visible'] = ![]; player['children'][0x2][_0x406f('0x44')][0xc][_0x406f('0x2a')] = !![]; player[_0x406f('0x44')][0x2][_0x406f('0x44')][0xd][_0x406f('0x2a')] = ![]; } else if (player_pick[0x0] == 'a') { player[_0x406f('0x44')][0x2][_0x406f('0x44')][0xb][_0x406f('0x2a')] = ![]; player[_0x406f('0x44')][0x2][_0x406f('0x44')][0xd][_0x406f('0x2a')] = !![]; player[_0x406f('0x44')][0x2]['children'][0xc]['visible'] = ![]; } player['children'][0x2][_0x406f('0x44')][0x1][_0x406f('0x1f')]['x'] = Math['PI'] / 0x2; player['children'][0x2][_0x406f('0x44')][0x1][_0x406f('0x1f')]['y'] = Math['PI'] / 0x2; player[_0x406f('0x44')][0x2][_0x406f('0x44')][0x1][_0x406f('0x24')]['x'] = 0xa; player[_0x406f('0x44')][0x2]['children'][0x0][_0x406f('0x1f')]['x'] = Math['PI'] / 0x2; player['children'][0x2][_0x406f('0x44')][0x0][_0x406f('0x1f')]['y'] = Math['PI'] / 0x2; player[_0x406f('0x44')][0x2][_0x406f('0x44')][0x0][_0x406f('0x24')]['x'] = 0xa; } else if (player_pick[_0x406f('0x2c')] == 0x0) { player['children'][0x2][_0x406f('0x44')][0x1][_0x406f('0x1f')]['x'] = 0x0; player[_0x406f('0x44')][0x2][_0x406f('0x44')][0x1]['rotation']['y'] = 0x0; player['children'][0x2][_0x406f('0x44')][0x1][_0x406f('0x24')]['x'] = 0x0; player[_0x406f('0x44')][0x2][_0x406f('0x44')][0x0][_0x406f('0x1f')]['x'] = 0x0; player['children'][0x2][_0x406f('0x44')][0x0][_0x406f('0x1f')]['y'] = 0x0; player[_0x406f('0x44')][0x2]['children'][0x0][_0x406f('0x24')]['x'] = 0x0; for (let _0x153a60 = 0x2; _0x153a60 <= 0x6; _0x153a60 = _0x153a60 + 0x2) { player[_0x406f('0x44')][0x2][_0x406f('0x44')][_0x153a60]['visible'] = ![]; player[_0x406f('0x44')][0x2][_0x406f('0x44')][_0x153a60 + 0x1][_0x406f('0x2a')] = ![]; } player[_0x406f('0x44')][0x2][_0x406f('0x44')][0x8]['visible'] = ![]; player[_0x406f('0x44')][0x2][_0x406f('0x44')][0x9]['visible'] = ![]; player[_0x406f('0x44')][0x2][_0x406f('0x44')][0xa][_0x406f('0x2a')] = ![]; player[_0x406f('0x44')][0x2][_0x406f('0x44')][0xb][_0x406f('0x2a')] = ![]; player[_0x406f('0x44')][0x2][_0x406f('0x44')][0xc][_0x406f('0x2a')] = ![]; player[_0x406f('0x44')][0x2]['children'][0xd][_0x406f('0x2a')] = ![]; } } console[_0x406f('0x7b')](_0x406f('0xa4'), levels[level_id][currentColumn]); } function getCell() { if (direction === _0x406f('0x7f')) return { 'lane': currentLane + 0x1, 'column': currentColumn }; if (direction === 'backward') return { 'lane': currentLane - 0x1, 'column': currentColumn }; if (direction === 'left') return { 'lane': currentLane, 'column': currentColumn - 0x1 }; if (direction === _0x406f('0x81')) return { 'lane': currentLane, 'column': currentColumn + 0x1 }; } function action() { if (!started) return; nextCell = getCell(); if (nextCell[_0x406f('0x83')] < 0x0 || nextCell['column'] >= columns || nextCell[_0x406f('0x84')] < 0x0) return; console['log']('action\x20nextCell', nextCell); console[_0x406f('0x7b')]('action\x20direction', direction); console[_0x406f('0x7b')](_0x406f('0xa5'), levels[level_id][nextCell[_0x406f('0x83')]][nextCell[_0x406f('0x84')]]); if (levels[level_id][nextCell[_0x406f('0x83')]][nextCell[_0x406f('0x84')]][0x1] == 't' && player_pick[0x0] == 'h') return cutForest(nextCell['column'], nextCell['lane']); if (levels[level_id][nextCell[_0x406f('0x83')]][nextCell[_0x406f('0x84')]][0x1] == 'r' && player_pick[0x0] == 'a') return cutRock(nextCell[_0x406f('0x83')], nextCell[_0x406f('0x84')]); } function updateCounter() { statsRocksDOM['innerHTML'] = counter['p']; statsWoodsDOM[_0x406f('0xa6')] = counter['b']; counterDOM[_0x406f('0xa6')] = counter['r']; } function cutForest(_0x2d97f2, _0x46e341) { console[_0x406f('0x7b')](_0x406f('0xa7'), currentColumn, _0x2d97f2); console['log'](_0x406f('0xa8'), currentLane, _0x46e341); if (!started) return; console[_0x406f('0x7b')](_0x406f('0xa9'), lanes[_0x46e341][_0x406f('0x23')]['children'][_0x2d97f2][_0x406f('0x44')][0x1][_0x406f('0x24')]['z']); console[_0x406f('0x7b')](_0x406f('0xaa'), levels[level_id][_0x2d97f2][_0x46e341]); if (lanes[_0x46e341]['mesh'][_0x406f('0x44')][_0x2d97f2][_0x406f('0x44')][0x1][_0x406f('0x24')]['z'] > -0x22) { lanes[_0x46e341]['mesh'][_0x406f('0x44')][_0x2d97f2][_0x406f('0x44')][0x1][_0x406f('0x24')]['z'] -= 0x7; updateCounter(); } else { lanes[_0x46e341]['mesh'][_0x406f('0x44')][_0x2d97f2][_0x406f('0x44')][0x1][_0x406f('0x24')]['z'] = -0x28; levels[level_id][_0x2d97f2][_0x46e341] = levels[level_id][_0x2d97f2][_0x46e341][0x0] + 'b'; lanes[_0x46e341][_0x406f('0x23')][_0x406f('0x44')][_0x2d97f2][_0x406f('0x44')][0x1][_0x406f('0x44')][0x0][_0x406f('0x24')]['z'] = 0x2a; lanes[_0x46e341][_0x406f('0x23')][_0x406f('0x44')][_0x2d97f2][_0x406f('0x44')][0x1]['children'][0x0][_0x406f('0x24')]['y'] = 0x4; lanes[_0x46e341][_0x406f('0x23')][_0x406f('0x44')][_0x2d97f2][_0x406f('0x44')][0x1][_0x406f('0x44')][0x0][_0x406f('0xab')]['x'] = 2.5; lanes[_0x46e341][_0x406f('0x23')]['children'][_0x2d97f2][_0x406f('0x44')][0x1]['children'][0x0]['scale']['z'] = 0.3; lanes[_0x46e341][_0x406f('0x23')][_0x406f('0x44')][_0x2d97f2][_0x406f('0x44')][0x1][_0x406f('0x44')][0x1]['position']['z'] = 0x2a; lanes[_0x46e341][_0x406f('0x23')][_0x406f('0x44')][_0x2d97f2][_0x406f('0x44')][0x1][_0x406f('0x44')][0x1][_0x406f('0x24')]['y'] = -0x9; lanes[_0x46e341][_0x406f('0x23')][_0x406f('0x44')][_0x2d97f2][_0x406f('0x44')][0x1][_0x406f('0x44')][0x1][_0x406f('0xab')]['x'] = 2.5; lanes[_0x46e341]['mesh'][_0x406f('0x44')][_0x2d97f2][_0x406f('0x44')][0x1][_0x406f('0x44')][0x1]['scale']['z'] = 0.3; lanes[_0x46e341]['mesh'][_0x406f('0x44')][_0x2d97f2][_0x406f('0x44')][0x1][_0x406f('0x44')][0x2]['scale']['z'] = 0.1; lanes[_0x46e341][_0x406f('0x23')][_0x406f('0x44')][_0x2d97f2][_0x406f('0x44')][0x1]['children'][0x2][_0x406f('0xab')]['x'] = 0.1; lanes[_0x46e341][_0x406f('0x23')][_0x406f('0x44')][_0x2d97f2][_0x406f('0x44')][0x1][_0x406f('0x44')][0x2][_0x406f('0xab')]['y'] = 0.1; } return; } function cutRock(_0xd352d0, _0x3a5072) { console['log']('cutForest\x20currentColumn', currentColumn, _0xd352d0); console[_0x406f('0x7b')](_0x406f('0xa8'), currentLane, _0x3a5072); if (!started) return; console['log'](_0x406f('0xa9'), lanes[_0x3a5072][_0x406f('0x23')]['children'][_0xd352d0][_0x406f('0x44')][0x1][_0x406f('0x24')]['z']); console['log'](_0x406f('0xaa'), levels[level_id][_0xd352d0][_0x3a5072]); if (lanes[_0x3a5072][_0x406f('0x23')]['children'][_0xd352d0][_0x406f('0x44')][0x1][_0x406f('0x24')]['z'] > -0x22) { lanes[_0x3a5072][_0x406f('0x23')][_0x406f('0x44')][_0xd352d0]['children'][0x1][_0x406f('0x24')]['z'] -= 0x7; updateCounter(); } else { lanes[_0x3a5072]['mesh'][_0x406f('0x44')][_0xd352d0][_0x406f('0x44')][0x1][_0x406f('0x24')]['z'] = -0x28; levels[level_id][_0xd352d0][_0x3a5072] = levels[level_id][_0xd352d0][_0x3a5072][0x0] + 'p'; lanes[_0x3a5072][_0x406f('0x23')][_0x406f('0x44')][_0xd352d0][_0x406f('0x44')][0x1][_0x406f('0x44')][0x0][_0x406f('0x24')]['z'] = 0x2a; lanes[_0x3a5072][_0x406f('0x23')][_0x406f('0x44')][_0xd352d0][_0x406f('0x44')][0x1][_0x406f('0x44')][0x0][_0x406f('0x24')]['y'] = 0x4; lanes[_0x3a5072][_0x406f('0x23')][_0x406f('0x44')][_0xd352d0][_0x406f('0x44')][0x1][_0x406f('0x44')][0x0][_0x406f('0xab')]['x'] = 2.5; lanes[_0x3a5072][_0x406f('0x23')][_0x406f('0x44')][_0xd352d0]['children'][0x1][_0x406f('0x44')][0x0][_0x406f('0xab')]['z'] = 0.3; lanes[_0x3a5072][_0x406f('0x23')]['children'][_0xd352d0][_0x406f('0x44')][0x1]['children'][0x1][_0x406f('0x24')]['z'] = 0x2a; lanes[_0x3a5072][_0x406f('0x23')][_0x406f('0x44')][_0xd352d0][_0x406f('0x44')][0x1][_0x406f('0x44')][0x1][_0x406f('0x24')]['y'] = -0x9; lanes[_0x3a5072][_0x406f('0x23')][_0x406f('0x44')][_0xd352d0][_0x406f('0x44')][0x1][_0x406f('0x44')][0x1][_0x406f('0xab')]['x'] = 2.5; lanes[_0x3a5072][_0x406f('0x23')][_0x406f('0x44')][_0xd352d0][_0x406f('0x44')][0x1]['children'][0x1]['scale']['z'] = 0.3; lanes[_0x3a5072]['mesh'][_0x406f('0x44')][_0xd352d0]['children'][0x1]['children'][0x2][_0x406f('0xab')]['z'] = 0.1; lanes[_0x3a5072]['mesh'][_0x406f('0x44')][_0xd352d0][_0x406f('0x44')][0x1][_0x406f('0x44')][0x2]['scale']['x'] = 0.1; lanes[_0x3a5072][_0x406f('0x23')][_0x406f('0x44')][_0xd352d0][_0x406f('0x44')][0x1]['children'][0x2][_0x406f('0xab')]['y'] = 0.1; } return; } function addPlayer(_0x2dc19b) { } function setDirections(_0x376878) { action(); directions[_0x406f('0x16')](_0x376878); } function move(_0x151c11, _0x106591 = null) { direction = _0x151c11; if (channel) { if (_0x106591 == null) { channel[_0x406f('0xac')]({ 'type': _0x406f('0xad'), 'direction': direction }); } else { return moves_players[_0x406f('0x16')]({ 'userId': _0x106591, 'direction': direction }); } } finalPositions = moves[_0x406f('0xae')]((_0x4eb707, _0x484069) => { if (_0x484069 === _0x406f('0x7f')) return { 'lane': _0x4eb707[_0x406f('0x84')] + 0x1, 'column': _0x4eb707[_0x406f('0x83')] }; if (_0x484069 === _0x406f('0x80')) return { 'lane': _0x4eb707[_0x406f('0x84')] - 0x1, 'column': _0x4eb707[_0x406f('0x83')] }; if (_0x484069 === 'left') return { 'lane': _0x4eb707['lane'], 'column': _0x4eb707[_0x406f('0x83')] - 0x1 }; if (_0x484069 === _0x406f('0x81')) return { 'lane': _0x4eb707[_0x406f('0x84')], 'column': _0x4eb707[_0x406f('0x83')] + 0x1 }; }, { 'lane': currentLane, 'column': currentColumn }); can_walk_ground = ['e', 'w']; can_walk_addon = ['t', 'r', 'm', 's', 'd']; can_walk_train = ['r', 's', 't', 'w']; if (direction === 'forward') { if (finalPositions['lane'] + 0x1 >= level_distance) { return setDirections(_0x406f('0x7f')); } else { if (can_walk_ground['indexOf'](levels[level_id][finalPositions[_0x406f('0x83')]][finalPositions['lane'] + 0x1][0x0]) !== -0x1) return setDirections(_0x406f('0x7f')); if (can_walk_addon[_0x406f('0xaf')](levels[level_id][finalPositions[_0x406f('0x83')]][finalPositions[_0x406f('0x84')] + 0x1][0x1]) !== -0x1) return setDirections(_0x406f('0x7f')); if (can_walk_train['indexOf'](levels[level_id][finalPositions[_0x406f('0x83')]][finalPositions['lane'] + 0x1][0x2]) !== -0x1) return setDirections('forward'); if (!stepStartTimestamp) startMoving = !![]; addLane(); } } else if (direction === _0x406f('0x80')) { if (finalPositions[_0x406f('0x84')] <= 0x0) { return setDirections(_0x406f('0x80')); } else { console[_0x406f('0x7b')](_0x406f('0xb0'), levels[level_id][finalPositions[_0x406f('0x83')]][finalPositions[_0x406f('0x84')] - 0x1]); if (can_walk_ground[_0x406f('0xaf')](levels[level_id][finalPositions['column']][finalPositions[_0x406f('0x84')] - 0x1][0x0]) !== -0x1) return setDirections(_0x406f('0x80')); if (can_walk_addon['indexOf'](levels[level_id][finalPositions[_0x406f('0x83')]][finalPositions[_0x406f('0x84')] - 0x1][0x1]) !== -0x1) return setDirections(_0x406f('0x80')); if (can_walk_train['indexOf'](levels[level_id][finalPositions[_0x406f('0x83')]][finalPositions['lane'] - 0x1][0x2]) !== -0x1) return setDirections(_0x406f('0x80')); if (!stepStartTimestamp) startMoving = !![]; } } else if (direction === _0x406f('0x65')) { if (finalPositions[_0x406f('0x83')] === 0x0) return; if (finalPositions[_0x406f('0x84')] < 0x0) { if (!stepStartTimestamp) { startMoving = !![]; } } else { console[_0x406f('0x7b')](_0x406f('0xb0'), levels[level_id][finalPositions['column'] - 0x1][finalPositions[_0x406f('0x84')]]); if (can_walk_ground['indexOf'](levels[level_id][finalPositions['column'] - 0x1][finalPositions[_0x406f('0x84')]][0x0]) !== -0x1) return setDirections(_0x406f('0x65')); if (can_walk_addon[_0x406f('0xaf')](levels[level_id][finalPositions[_0x406f('0x83')] - 0x1][finalPositions[_0x406f('0x84')]][0x1]) !== -0x1) return setDirections(_0x406f('0x65')); if (can_walk_train[_0x406f('0xaf')](levels[level_id][finalPositions['column'] - 0x1][finalPositions['lane']][0x2]) !== -0x1) return setDirections(_0x406f('0x65')); if (!stepStartTimestamp) startMoving = !![]; } } else if (direction === _0x406f('0x81')) { if (finalPositions[_0x406f('0x83')] === columns - 0x1) return; if (finalPositions[_0x406f('0x84')] < 0x0) { if (!stepStartTimestamp) { startMoving = !![]; } } else { console[_0x406f('0x7b')]('next\x20cell', levels[level_id][finalPositions['column'] + 0x1][finalPositions[_0x406f('0x84')]]); if (can_walk_ground[_0x406f('0xaf')](levels[level_id][finalPositions['column'] + 0x1][finalPositions[_0x406f('0x84')]][0x0]) !== -0x1) return setDirections(_0x406f('0x81')); if (can_walk_addon[_0x406f('0xaf')](levels[level_id][finalPositions[_0x406f('0x83')] + 0x1][finalPositions[_0x406f('0x84')]][0x1]) !== -0x1) return setDirections(_0x406f('0x81')); if (can_walk_train[_0x406f('0xaf')](levels[level_id][finalPositions[_0x406f('0x83')] + 0x1][finalPositions[_0x406f('0x84')]][0x2]) !== -0x1) return setDirections(_0x406f('0x81')); if (!stepStartTimestamp) startMoving = !![]; } } if (_0x106591 == null) { moves[_0x406f('0x16')](direction); } } function animate(_0x3dd5d7) { requestAnimationFrame(animate); if (!previousTimestamp) previousTimestamp = _0x3dd5d7; delta = _0x3dd5d7 - previousTimestamp; previousTimestamp = _0x3dd5d7; dirLight[_0x406f('0x24')]['x'] = initialDirLightPositionX; if (started && train_countdown <= -0x1) { if (train_counter >= positionWidth * zoom) { for (let _0x1fcabc = train_position[0x1] - train_length; _0x1fcabc <= train_position[0x1]; _0x1fcabc++) { j = train_position[0x1] - _0x1fcabc; if (j <= 0x1) levels[level_id][train_position[0x0]][_0x1fcabc] = _0x406f('0xf'); else if (j <= 0x2) levels[level_id][train_position[0x0]][_0x1fcabc] = _0x406f('0xb1'); else if (j <= 0x4) levels[level_id][train_position[0x0]][_0x1fcabc] = _0x406f('0xe'); else if (j <= 0x6) levels[level_id][train_position[0x0]][_0x1fcabc] = _0x406f('0xd'); else if (j == 0x7) levels[level_id][train_position[0x0]][_0x1fcabc] = 'gl'; } y = train_position[0x1]; y++; train_position = [train_position[0x0], y]; train_counter = 0x0; } train_counter += 0x1 / 0x64 * delta; train[_0x406f('0x24')]['y'] += 0x1 / 0x64 * delta; wwater[_0x406f('0x24')]['y'] += 0x1 / 0x64 * delta; wstock['position']['y'] += 0x1 / 0x64 * delta; wrails['position']['y'] += 0x1 / 0x64 * delta; if (wwater[_0x406f('0x44')][0x0][_0x406f('0x44')][0x0][_0x406f('0xab')]['z'] > 0x0) { wwater[_0x406f('0x44')][0x0][_0x406f('0x44')][0x0][_0x406f('0xab')]['z'] -= 0.0002; } else { train_smoke[_0x406f('0x44')][0x0][_0x406f('0x4d')][_0x406f('0xa2')][_0x406f('0xa3')](colors[_0x406f('0x42')]); wwater_smoke[_0x406f('0x44')][0x0]['material']['color'][_0x406f('0xa3')](colors[_0x406f('0x42')]); wwater_smoke[_0x406f('0x2a')] = !![]; if (wwater['children'][0x0][_0x406f('0x44')][0x0][_0x406f('0x2a')] == !![]) { wwater['children'][0x0][_0x406f('0x44')][0x0][_0x406f('0x2a')] = ![]; train_smoke[_0x406f('0x44')][0x0][_0x406f('0x4d')]['opacity'] = 0.99; } } let _0x17f08d = 0xbb8; if (wwater[_0x406f('0x44')][0x0][_0x406f('0x44')][0x0][_0x406f('0x2a')] == ![]) { _0x17f08d = 0x2328; } train_smoke[_0x406f('0x24')]['z'] += 0x1 / 0x1f4 * delta; train_smoke[_0x406f('0x24')]['y'] -= 0x1 / 0x64 * delta; train_smoke[_0x406f('0xab')]['x'] += 0x1 / 0xfa0 * delta; train_smoke['scale']['y'] += 0x1 / 0xfa0 * delta; train_smoke[_0x406f('0xab')]['z'] += 0x1 / 0xfa0 * delta; train_smoke[_0x406f('0x44')][0x0][_0x406f('0x4d')][_0x406f('0x4c')] -= 0x1 / _0x17f08d * delta; if (wwater[_0x406f('0x44')][0x0][_0x406f('0x44')][0x0]['visible'] == ![]) { wwater_smoke[_0x406f('0x24')]['z'] += 0x1 / 0x1f4 * delta; wwater_smoke[_0x406f('0x24')]['y'] -= 0x1 / 0x64 * delta; wwater_smoke[_0x406f('0xab')]['x'] += 0x1 / 0xfa0 * delta; wwater_smoke['scale']['y'] += 0x1 / 0xfa0 * delta; wwater_smoke[_0x406f('0xab')]['z'] += 0x1 / 0xfa0 * delta; wwater_smoke[_0x406f('0x44')][0x0]['material'][_0x406f('0x4c')] -= 0x1 / _0x17f08d * delta; } if (train_smoke[_0x406f('0x44')][0x0][_0x406f('0x4d')]['opacity'] < 0x0) { train_smoke[_0x406f('0x44')][0x0][_0x406f('0x4d')][_0x406f('0x4c')] = 0.99; train_smoke['position']['z'] = train_smoke_default['position']['z']; train_smoke[_0x406f('0xab')]['z'] = train_smoke_default[_0x406f('0xab')]['z']; train_smoke[_0x406f('0xab')]['y'] = train_smoke_default[_0x406f('0xab')]['y']; train_smoke['scale']['x'] = train_smoke_default[_0x406f('0xab')]['x']; train_smoke[_0x406f('0x24')]['y'] = train_smoke_default[_0x406f('0x24')]['y']; if (wwater[_0x406f('0x44')][0x0][_0x406f('0x44')][0x0][_0x406f('0x2a')] == ![]) { wwater_smoke[_0x406f('0x44')][0x0][_0x406f('0x4d')][_0x406f('0x4c')] = 0.99; wwater_smoke[_0x406f('0x24')]['z'] = train_smoke_default[_0x406f('0x24')]['z']; wwater_smoke[_0x406f('0xab')]['z'] = train_smoke_default[_0x406f('0xab')]['z']; wwater_smoke[_0x406f('0xab')]['y'] = train_smoke_default[_0x406f('0xab')]['y']; wwater_smoke[_0x406f('0xab')]['x'] = train_smoke_default['scale']['x']; wwater_smoke['position']['y'] = -0x14; } } camera[_0x406f('0x24')]['y'] += 0x1 / 0x64 * delta; } else if (train_countdown > -0x1) { train_countdown -= 0x1; if (Number[_0x406f('0xb2')](train_countdown / 0x64)) { if (train_countdown / 0x64 > 0x0) { train[_0x406f('0x44')][train_countdown / 0x64 + 0x1][_0x406f('0x2a')] = !![]; if (train_countdown / 0x64 < 0xa) { train[_0x406f('0x44')][train_countdown / 0x64 + 0x2][_0x406f('0x2a')] = ![]; } } else { train[_0x406f('0x44')][train_countdown / 0x64 + 0x1][_0x406f('0x2a')] = ![]; train[_0x406f('0x44')][train_countdown / 0x64 + 0x2][_0x406f('0x2a')] = ![]; } } } if (startMoving) { stepStartTimestamp = _0x3dd5d7; startMoving = ![]; } if (stepStartTimestamp) { moveDeltaTime = _0x3dd5d7 - stepStartTimestamp; moveDeltaDistance = Math[_0x406f('0xb3')](moveDeltaTime / stepTime, 0x1) * positionWidth * zoom; jumpDeltaDistance = Math[_0x406f('0xb4')](Math[_0x406f('0xb3')](moveDeltaTime / stepTime, 0x1) * Math['PI']) * 0x8 * zoom; switch (moves[0x0]) { case _0x406f('0x7f'): { positionY = currentLane * positionWidth * zoom + moveDeltaDistance; player[_0x406f('0x24')]['y'] = positionY; player[_0x406f('0x24')]['z'] = jumpDeltaDistance; player[_0x406f('0x1f')]['z'] = Math['PI'] / 0x2; break; } case _0x406f('0x80'): { positionY = currentLane * positionWidth * zoom - moveDeltaDistance; player[_0x406f('0x24')]['y'] = positionY; player['position']['z'] = jumpDeltaDistance; player['rotation']['z'] = -Math['PI'] / 0x2; break; } case 'left': { positionX = currentColumn * positionWidth * zoom - moveDeltaDistance; player[_0x406f('0x24')]['x'] = positionX; player[_0x406f('0x24')]['z'] = jumpDeltaDistance; player['rotation']['z'] = Math['PI']; break; } case _0x406f('0x81'): { positionX = currentColumn * positionWidth * zoom + moveDeltaDistance; player[_0x406f('0x24')]['x'] = positionX; player[_0x406f('0x24')]['z'] = jumpDeltaDistance; player[_0x406f('0x1f')]['z'] = 0x0; break; } }let _0x139cfc = moves_players[0x0]; if (_0x139cfc != null) { switch (_0x139cfc[_0x406f('0x86')]) { case _0x406f('0x7f'): { players[_0x139cfc[_0x406f('0xb5')]]['position']['y'] += positionWidth * zoom + moveDeltaDistance; players[_0x139cfc[_0x406f('0xb5')]]['position']['z'] = jumpDeltaDistance; break; } case _0x406f('0x80'): { players[_0x139cfc[_0x406f('0xb5')]]['position']['y'] -= positionWidth * zoom + moveDeltaDistance; players[_0x139cfc[_0x406f('0xb5')]][_0x406f('0x24')]['z'] = jumpDeltaDistance; break; } case _0x406f('0x65'): { players[_0x139cfc[_0x406f('0xb5')]][_0x406f('0x24')]['x'] -= positionWidth * zoom + moveDeltaDistance; players[_0x139cfc[_0x406f('0xb5')]][_0x406f('0x24')]['z'] = jumpDeltaDistance; break; } case _0x406f('0x81'): { players[_0x139cfc[_0x406f('0xb5')]]['position']['x'] += positionWidth * zoom + moveDeltaDistance; players[_0x139cfc['userId']][_0x406f('0x24')]['z'] = jumpDeltaDistance; break; } }moves_players[_0x406f('0x96')](); } if (moveDeltaTime > stepTime) { switch (moves[0x0]) { case _0x406f('0x7f'): { currentLane++; break; } case 'backward': { currentLane--; break; } case _0x406f('0x65'): { currentColumn--; break; } case _0x406f('0x81'): { currentColumn++; break; } }moves[_0x406f('0x96')](); stepStartTimestamp = moves['length'] === 0x0 ? null : _0x3dd5d7; } } else { if (directions[0x0] != null) { console[_0x406f('0x7b')](_0x406f('0xb6'), directions[0x0]); switch (directions[0x0]) { case _0x406f('0x7f'): { player[_0x406f('0x1f')]['z'] = Math['PI'] / 0x2; break; } case _0x406f('0x80'): { player['rotation']['z'] = -Math['PI'] / 0x2; break; } case _0x406f('0x65'): { player[_0x406f('0x1f')]['z'] = Math['PI']; break; } case _0x406f('0x81'): { player[_0x406f('0x1f')]['z'] = 0x0; break; } }directions[_0x406f('0x96')](); } } renderer[_0x406f('0xb7')](scene, camera); stats['update'](); } function start() { started = !![]; console[_0x406f('0x7b')](_0x406f('0xb8')); } function init() { stats = createStats(); document[_0x406f('0x6c')][_0x406f('0x6d')](stats[_0x406f('0x63')]); initialCameraPositionY += 0x190; initialCameraPositionX += 0x12c; camera[_0x406f('0x24')]['y'] = initialCameraPositionX; camera[_0x406f('0x24')]['x'] = initialCameraPositionY; camera[_0x406f('0x24')]['z'] = distance; currentLane = 0x3; currentColumn = columns / 0x2; hemiLight = new THREE[(_0x406f('0xb9'))](0xffffff, 0xffffff, 0.6); scene[_0x406f('0x25')](hemiLight); dirLight = new THREE[(_0x406f('0xba'))](0xffffff, 0.6); dirLight[_0x406f('0x24')][_0x406f('0xbb')](initialDirLightPositionX, initialDirLightPositionY, 0x190); dirLight['castShadow'] = !![]; scene[_0x406f('0x25')](dirLight); dirLight[_0x406f('0xbc')]['mapSize']['width'] = 0x800; dirLight[_0x406f('0xbc')]['mapSize'][_0x406f('0x2f')] = 0x800; var _0x44fc7e = 0x320; dirLight[_0x406f('0xbc')][_0x406f('0xbd')][_0x406f('0x65')] = _0x44fc7e; dirLight[_0x406f('0xbc')][_0x406f('0xbd')][_0x406f('0x81')] = -_0x44fc7e; dirLight[_0x406f('0xbc')][_0x406f('0xbd')][_0x406f('0xbe')] = -_0x44fc7e; dirLight[_0x406f('0xbc')]['camera'][_0x406f('0xbf')] = _0x44fc7e; backLight = new THREE[(_0x406f('0xba'))](0x0, 0.4); backLight[_0x406f('0x24')][_0x406f('0xbb')](0xc8, 0xc8, 0x32); backLight[_0x406f('0x3e')] = !![]; } window['addEventListener'](_0x406f('0xc0'), _0x47526b => { init(); initaliseValues(); updateCounter(); renderer['render'](scene, camera); requestAnimationFrame(animate); window[_0x406f('0xc1')] = scene; window[_0x406f('0xc2')] = THREE; }); var chatOutput = document[_0x406f('0x18')](_0x406f('0xc3')); var chatInput = document['getElementById']('chat-input'); var startButton = document[_0x406f('0x18')](_0x406f('0xc4')); var startSoloButton = document[_0x406f('0x18')](_0x406f('0xc5')); var menu_principal = document[_0x406f('0x18')](_0x406f('0xc6')); var menu_multi = document[_0x406f('0x18')](_0x406f('0xc7')); var cancelDatachannel = document[_0x406f('0x18')](_0x406f('0xc8')); var menu = document[_0x406f('0x18')](_0x406f('0xc9')); let channel; chatInput[_0x406f('0xca')] = function (_0x4c64ec) { if (_0x4c64ec[_0x406f('0x82')] != 0xd) return; channel[_0x406f('0xac')]({ 'type': _0x406f('0xcb'), 'message': this[_0x406f('0xcc')] }); chatOutput[_0x406f('0xa6')] += '<li>Moi:\x20' + this[_0x406f('0xcc')] + _0x406f('0xcd'); this['value'] = ''; }; startSoloButton[_0x406f('0xce')] = function () { menu[_0x406f('0x60')][_0x406f('0x61')] = _0x406f('0xcf'); start(); }; cancelDatachannel[_0x406f('0xce')] = function () { console[_0x406f('0x7b')](_0x406f('0xd0'), channel); menu_principal[_0x406f('0x60')][_0x406f('0x61')] = _0x406f('0xd1'); menu_multi[_0x406f('0x60')][_0x406f('0x61')] = 'none'; delete channel; }; startButton[_0x406f('0xce')] = function () { console[_0x406f('0x7b')](_0x406f('0xd2')); menu_principal[_0x406f('0x60')][_0x406f('0x61')] = _0x406f('0xcf'); menu_multi[_0x406f('0x60')][_0x406f('0x61')] = _0x406f('0xd1'); channel = new DataChannel(_0x406f('0xd3')); channel[_0x406f('0xd4')] = function (_0x37a4ce) { console[_0x406f('0x7b')]('on\x20open', _0x37a4ce); chatInput['style']['display'] = _0x406f('0xd1'); startButton[_0x406f('0x60')][_0x406f('0x61')] = _0x406f('0xcf'); chatOutput[_0x406f('0xa6')] += _0x406f('0xd5') + _0x37a4ce + _0x406f('0xcd'); addPlayer(_0x37a4ce); menu[_0x406f('0x60')][_0x406f('0x61')] = _0x406f('0xcf'); start(); }; channel[_0x406f('0xd6')] = (_0x5ed997, _0xbb8079) => { console[_0x406f('0x7b')](_0x406f('0xd7'), _0xbb8079); if (_0x5ed997[_0x406f('0xd8')] == _0x406f('0xcb')) chatOutput[_0x406f('0xa6')] += _0x406f('0xd9') + _0xbb8079 + ':\x20' + _0x5ed997[_0x406f('0xcb')] + _0x406f('0xcd'); else if (_0x5ed997[_0x406f('0xd8')] == _0x406f('0xad')) { startMoving = !![]; move(_0x5ed997[_0x406f('0x86')], _0xbb8079); } }; channel[_0x406f('0xda')] = _0x1295c4 => { chatOutput[_0x406f('0xa6')] += '<li>' + _0x1295c4 + _0x406f('0xdb'); chatInput['style'][_0x406f('0x61')] = _0x406f('0xcf'); menu_principal[_0x406f('0x60')][_0x406f('0x61')] = _0x406f('0xd1'); menu_multi[_0x406f('0x60')][_0x406f('0x61')] = _0x406f('0xcf'); }; };